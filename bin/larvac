#!/usr/bin/env python
#coding=utf8

'''
使用-o选项进行larc.py调用的一个快捷实现
'''

import sys, os, getopt

def main():
    #定位目录
    THIS_SCRIPT_NAME_SUFFIX = "/bin/larvac"
    this_script_name = os.path.realpath(sys.argv[0])
    assert this_script_name.endswith(THIS_SCRIPT_NAME_SUFFIX)
    larva_dir = this_script_name[: -len(THIS_SCRIPT_NAME_SUFFIX)]
    larc_script_name = larva_dir + "/compiler/larc.py"

    def _show_usage_and_exit():
        print >> sys.stderr, """
编译Larva模块

使用方法

    larvac OPTIONS MAIN_MODULE_SPEC

各参数说明

    OPTIONS: [-v] [-u] [--recoverable_detecting] -o OUT_BIN

{v}

{u}

{recoverable_detecting}

{o}

{MAIN_MODULE_SPEC}
""".format(**eval(open(larva_dir + "/compiler/help_dict").read()))
        sys.exit(1)

    larc_args = ["python", larc_script_name]

    #解析命令行参数
    try:
        opt_list, args = getopt.getopt(sys.argv[1 :], "vuo:m:", ["recoverable_detecting"])
    except getopt.GetoptError:
        _show_usage_and_exit()
    opt_map = dict(opt_list)
    for opt in "-v", "-u", "--recoverable_detecting":
        if opt in opt_map:
            larc_args.append(opt)
    if "-o" not in opt_map:
        _show_usage_and_exit()
    larc_args.extend(["-o", opt_map["-o"]])
    if "-m" in opt_map:
        if len(args) != 0:
            _show_usage_and_exit()
        larc_args.extend(["-m", opt_map["-m"]])
    else:
        if len(args) != 1:
            _show_usage_and_exit()
        larc_args.append(args[0])

    #调用larc.py执行
    os.execvp(larc_args[0], larc_args)

if __name__ == "__main__":
    main()
