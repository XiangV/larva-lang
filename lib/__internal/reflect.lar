!<<

import (
    "fmt"
    "reflect"
)

//larva反射接口，所有被编译的类、闭包（相当于匿名类）都要实现这个接口，由编译器保证
type lar_reflect_intf interface {
    lar_reflect_type_name()     *lar_cls_@<<:String>>           //返回类名
    lar_reflect_can_new_empty() bool                            //是否支持new一个空对象（所有属性为零值）
    lar_reflect_new_empty()     interface{}                     //new一个空对象并返回，若类不支持此操作则返回nil
    lar_reflect_attr_infos()    []*lar_reflect_attr_info_type   //返回属性信息表
    lar_reflect_attr_refs()     []*lar_reflect_attr_ref_type    //返回所有属性的引用
    lar_reflect_method_infos()  []*lar_reflect_method_info_type //返回方法信息表（含构造方法）
    lar_reflect_methods()       []*lar_reflect_method_type      //返回所有方法（不含构造方法）
    lar_reflect_method_of_new() *lar_reflect_method_type        //返回public构造方法，若没有则返回nil
}

//属性信息
type lar_reflect_attr_info_type struct {
    tn      string
    zv      interface{}
    name    string
    tags    []*lar_reflect_attr_tag_type
}

//属性的tag
type lar_reflect_attr_tag_type struct {
    name    string
    value   string
}

//属性的引用
type lar_reflect_attr_ref_type struct {
    ptr     interface{}             //指向属性的指针
    tn      string                  //属性的类型名，Value的Ref接口需要用到，和lar_reflect_attr_info_type中的tn同
    get     func () interface{}
    can_set func (interface{}) bool
    set     func (interface{}) bool //返回true表示成功
}

//方法信息
type lar_reflect_method_info_type struct {
    ret_tn      string
    ret_zv      interface{}
    name        string
    arg_infos   []*lar_reflect_method_arg_info_type
}

//方法参数信息
type lar_reflect_method_arg_info_type struct {
    is_ref  bool
    tn      string
    zv      interface{}
}

//方法
type lar_reflect_method_type struct {
    //err_arg_seq的值：<0表示参数数量不对，=0表示正确，>0表示第一个错误参数的序号（1开始）
    can_call    func (args []*lar_reflect_method_arg_type) (err_arg_seq int32)
    call        func (lar_fiber *lar_go_stru_fiber,
                      args []*lar_reflect_method_arg_type) (err_arg_seq int32, ret interface{}, has_ret bool) //has_ret为false表示返回类型为void
}

//参数，若is_ref为true，则v为一个ptr
type lar_reflect_method_arg_type struct {
    is_ref  bool
    v       interface{}
}

!>>

final String
    REFLECT_TYPE_NAME_GO_TYPE_PREFIX = "<GoType ",
    REFLECT_TYPE_NAME_GO_TYPE_SUFFIX = ">",
;

!<<

func lar_go_func_@<<reflect_type_name>>(a interface{}) (name *lar_cls_@<<:String>>, is_go_type_name bool) {
    var n string
    switch a.(type) {
    case nil:
        n = "<nil>"
    case bool:
        n = "bool"
    case int8:
        n = "schar"
    case uint8:
        n = "char"
    case int16:
        n = "short"
    case uint16:
        n = "ushort"
    case int32:
        n = "int"
    case uint32:
        n = "uint"
    case int64:
        n = "long"
    case uint64:
        n = "ulong"
    case float32:
        n = "float"
    case float64:
        n = "double"
    default:
        lri, ok := a.(lar_reflect_intf)
        if ok {
            name = lri.lar_reflect_type_name()
            return
        }
        n = fmt.Sprintf("%s%s%s",
                        lar_str_to_go_str(lar_gv_@<<REFLECT_TYPE_NAME_GO_TYPE_PREFIX>>), reflect.TypeOf(a).String(),
                        lar_str_to_go_str(lar_gv_@<<REFLECT_TYPE_NAME_GO_TYPE_SUFFIX>>))
        is_go_type_name = true
    }
    name = lar_str_from_go_str(n)
    return
}

!>>

public String reflect_type_name(GoAny a)
{
    !<<
    name, _ := lar_go_func_@<<reflect_type_name>>(l_a)
    return name
    !>>
}

public bool is_go_type_name(String tn)
{
    return tn.has_prefix(REFLECT_TYPE_NAME_GO_TYPE_PREFIX) && tn.has_suffix(REFLECT_TYPE_NAME_GO_TYPE_SUFFIX);
}
