import time, util;

interface Case
{
    String title();
    String run();
}

public class CaseResult
{
    public bool ok()
    {
        return this._ok;
    }

    public String msg()
    {
        return this._msg;
    }

    bool   _ok;  //测试成功或失败
    String _msg; //测试结果消息
}

public class CaseRunner
{
    public CaseRunner()
    {
        this.output_enabled = true;
        this.cases          = new util.HashMap<String, Case>(nil);
        this.results        = new util.HashMap<String, CaseResult>(nil);
    }

    public void disable_output()
    {
        this.output_enabled = false;
    }

    void add_case(String name, Case case)
    {
        if (this.cases.contains_key(name))
        {
            throw(new ValueError("测试用例'%s'已存在".(name)));
        }
        this.cases.set(name, case);
    }

    public void add_test_case(String name, Callable callee)
    {
        this.add_case(name, []{
            String title()
            {
                return "TestCase[%s]".(name);
            }

            String run()
            {
                callee.call();
                return "";
            }
        });
    }

    public void add_benchmark_case(String name, Callable callee)
    {
        this.add_case(name, []{
            String title()
            {
                return "BenchmarkCase[%s]".(name);
            }

            String run()
            {
                for (ulong times = 1; ; times <<= 1)
                {
                    double start_time = time.time();
                    for (ulong i = 0; i < times; ++ i)
                    {
                        callee.call();
                    }
                    double time_cost = time.time() - start_time;
                    if (time_cost > 0.3)
                    {
                        return "%.2f op/s".((double)times / time_cost);
                    }
                }
            }
        });
    }

    public CaseResult get_result(String name)
    {
        var iter = this.results.find(name);
        if (iter === nil)
        {
            throw(new KeyError(name));
        }
        return iter.value();
    }

    public void run()
    {
        foreach (var case_kv: this.cases.iter())
        {
            var case_name = case_kv.first();
            var case = case_kv.second();

            if (this.output_enabled)
            {
                output_with_pos(case.title(), TAB_COUNT_TITLE);
            }

            String msg;
            var c = call_and_catch<Fail>([]{
                public void call()
                {
                    msg = case.run();
                    if (msg === nil)
                    {
                        msg = "";
                    }
                }
            });

            var result = new CaseResult{
                _ok:  c === nil,
                _msg: msg if c === nil else c.throwed().str(),
            };
            this.results.set(case_name, result);

            if (this.output_enabled)
            {
                output_with_pos(RESULT_TEXT_OK if result.ok() else RESULT_TEXT_FAIL, TAB_COUNT_RESULT);
                output_with_pos(result.msg() if result.ok() else color_text(TEXT_COLOR_RED, result.msg()), TAB_COUNT_MSG);
                output_with_pos("\n", 0);
            }
        }
    }

    bool                             output_enabled; //是否开启输出，默认开启
    util.HashMap<String, Case>       cases;
    util.HashMap<String, CaseResult> results;
}
