import testing, util;

interface CaseResultMsgChecker
{
    bool is_valid(String msg);
}

final String FAIL_MSG = "fAiL败失"; //故意弄个不正常的失败信息，免得被调用的其他接口也抛出一个testing.Fail，虽然一般不太可能

void fail()
{
    testing.fail(FAIL_MSG);
}

class Case
{
    bool is_benchmark_case;
    String name;
    Callable callee;
    bool expecting_ok;
    CaseResultMsgChecker msg_checker; //若为nil，则检查的时候根据expecting_ok的值，和空串或FAIL_MSG比对
}

Case[] prepare()
{
    return new Case[]{
        new Case{
            name: "普通测试用例-成功",
            callee: []{
                public void call()
                {
                }
            },
            expecting_ok: true,
        },
        new Case{
            name: "普通测试用例-失败",
            callee: []{
                public void call()
                {
                    fail();
                }
            },
            expecting_ok: false,
        },
        new Case{
            is_benchmark_case: true,
            name: "性能测试用例-成功",
            callee: []{
                public void call()
                {
                    "-".repeat(1000);
                }
            },
            expecting_ok: true,
            msg_checker: []{
                bool is_valid(String msg)
                {
                    var msg_suffix = " op/s";
                    if (!msg.has_suffix(msg_suffix))
                    {
                        return false;
                    }
                    var c = call_and_catch<ValueError>([]{
                        public void call()
                        {
                            msg.sub_str(0, msg.len() - msg_suffix.len()).parse_double();
                        }
                    });
                    return c === nil;
                }
            },
        },
        new Case{
            is_benchmark_case: true,
            name: "性能测试用例-失败",
            callee: []{
                public void call()
                {
                    fail();
                }
            },
            expecting_ok: false,
        },
    };
}

public void main()
{
    //先通过禁用输出来执行一批case，然后再通过对case执行结果和期望结果的比较，确定testing模块的执行是否符合预期

    var prepare_cases = prepare();
    var prepare_runner = new testing.CaseRunner();
    prepare_runner.disable_output();
    foreach (var case: prepare_cases.iter())
    {
        if (case.is_benchmark_case)
        {
            prepare_runner.add_benchmark_case(case.name, case.callee);
        }
        else
        {
            prepare_runner.add_test_case(case.name, case.callee);
        }
    }
    prepare_runner.run();

    var r = new testing.CaseRunner();
    foreach (var _case: prepare_cases.iter())
    {
        //这里需要将case作为for循环体的局部变量，这样下面add_test_case中的闭包就是绑定了循环中的不同case，因为_case是属于循环而非循环体的
        var case = _case;

        var case_result = prepare_runner.get_result(case.name);
        r.add_test_case("测试“".concat(case.name).concat("”"), []{
            public void call()
            {
                testing.assert(case.expecting_ok == case_result.ok(),
                               "子用例的测试应该执行%s，但是%s".("成功" if case.expecting_ok else "失败",
                                                                 "成功" if case_result.ok() else "失败"));

                if (case.msg_checker === nil)
                {
                    var expecting_msg = "" if case.expecting_ok else FAIL_MSG;
                    testing.assert(case_result.msg().eq(expecting_msg),
                                   "子用例测试结果消息错误，应为[%s]，实际为[%s]".(expecting_msg, case_result.msg()));
                }
                else
                {
                    testing.assert(case.msg_checker.is_valid(case_result.msg()), "子用例测试结果消息[%s]不符合预期".(case_result.msg()));
                }
            }
        });
    }
    r.run();
}
