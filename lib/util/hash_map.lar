import debug;

class HashMapNode<K, V>
{
    //键值对
    K k;
    V v;

    //用链表法解决冲突，这个next是用于每个槽下的单链表
    HashMapNode<K, V> next;

    //所有数据节点按照插入顺序，用双链表管理，保证迭代遍历时是按插入顺序进行，这会比较方便，而且可简化迭代器设计
    HashMapNode<K, V> prev_elem_node;
    HashMapNode<K, V> next_elem_node;
}

public class HashMap<K, V>
{
    public HashMap(Iter<Pair<K, V>> data_iter)
    {
        this.tbl = new HashMapNode<K, V>[1 << 3]; //表大小为2的幂

        //初始化记录插入顺序的双链表
        this.elem_node_head = new HashMapNode<K, V>();
        this.elem_node_tail = new HashMapNode<K, V>{
            prev_elem_node: this.elem_node_head,
        };
        this.elem_node_head.next_elem_node = this.elem_node_tail;

        this.sz = 0;
        this.dirty = 0;

        if (data_iter !== nil)
        {
            this.update(data_iter);
        }
    }

    public String repr()
    {
        var sl = new String[this.size() + 2];
        sl[0] = "<%T {".(this);
        long i = 1;
        foreach (var p : this.iter())
        {
            if (i == 1)
            {
                sl[i] = "%r: %r".(p.first(), p.second());
            }
            else
            {
                sl[i] = ", %r: %r".(p.first(), p.second());
            }
            ++ i;
        }
        sl[i] = "}>";
        ++ i;
        return "".join(sl[: i].iter());
    }

    public void update(Iter<Pair<K, V>> data_iter)
    {
        foreach (var p : data_iter)
        {
            this.set(p.first(), p.second());
        }
    }

    public long size()
    {
        return this.sz;
    }

    //查找k，返回找到的idx位置以及node，若node为nil则表示不存在，冲突解决方式：链表法
    long find_node(HashMapNode<K, V>[] tbl, K k, ref HashMapNode<K, V> node)
    {
        long idx = hash(k) & (tbl.size() - 1); //用位运算代替取余;

        for (node = tbl[idx]; node !== nil && !eq(node.k, k); node = node.next)
        {
        }

        return idx;
    }

    void rehash_if_necessary()
    {
        long tbl_size = this.tbl.size();
        long new_size;
        if (tbl_size > 1L << 10 && this.sz < tbl_size * 15 / 100)
        {
            //表比较大且装载率太低，缩容，缩小一半
            new_size = tbl_size >> 1;
        }
        else if (this.sz > tbl_size * 7 / 10)
        {
            //装载率过高，扩容，若表比较大则扩大2倍，否则扩大4倍
            new_size = tbl_size << 1;
            if (new_size < 1L << 16)
            {
                new_size <<= 1;
            }
        }
        else
        {
            //装载率正常，不做调整
            return;
        }
        debug.assert(new_size > 0, "bug");

        //创建新表并迁移旧表数据，这个过程将来可以改成渐进式
        var new_tbl = new HashMapNode<K, V>[new_size];
        for (var i = this.tbl.size() - 1; i >= 0; -- i)
        {
            //直接迁移node，而不是新建node迁数据
            for (;;)
            {
                //拿出一个node
                var node = this.tbl[i];
                if (node === nil)
                {
                    //这个槽空了
                    break;
                }
                this.tbl[i] = node.next;

                //插入新表
                HashMapNode<K, V> must_be_nil_node;
                long idx = this.find_node(new_tbl, node.k, ref must_be_nil_node);
                debug.assert(must_be_nil_node === nil, "bug"); //在新表插入node肯定找不到的
                node.next = new_tbl[idx];
                new_tbl[idx] = node;
            }
        }
        this.tbl = new_tbl;
        ++ this.dirty;
    }

    V get_or_pop(K k, bool need_pop)
    {
        HashMapNode<K, V> node;
        long idx = this.find_node(this.tbl, k, ref node);
        if (node === nil)
        {
            throw(new KeyError("%r".(k)));
        }
        if (need_pop)
        {
            if (this.tbl[idx] === node)
            {
                //第一个节点就是，直接删掉
                this.tbl[idx] = node.next;
            }
            else
            {
                //在链表中找到节点的前驱，通过修改其next属性来删掉节点
                for (var nd = this.tbl[idx]; ; nd = nd.next)
                {
                    debug.assert(nd !== nil, "bug");
                    if (nd.next === node)
                    {
                        nd.next = node.next;
                        break;
                    }
                }
            }

            //从双链表中删除node
            var prev_elem_node = node.prev_elem_node, next_elem_node = node.next_elem_node;
            prev_elem_node.next_elem_node = next_elem_node;
            next_elem_node.prev_elem_node = prev_elem_node;

            -- this.sz;
            ++ this.dirty;
            this.rehash_if_necessary();
        }
        return node.v;
    }

    public V get(K k)
    {
        return this.get_or_pop(k, false);
    }

    public V try_get(K k, ref bool ok)
    {
        HashMapNode<K, V> node;
        this.find_node(this.tbl, k, ref node);
        if (node !== nil)
        {
            ok = true;
            return node.v;
        }
        ok = false;
    }

    public V pop(K k)
    {
        return this.get_or_pop(k, true);
    }

    public void set(K k, V v)
    {
        this.rehash_if_necessary();

        HashMapNode<K, V> node;
        long idx = this.find_node(this.tbl, k, ref node);
        if (node === nil)
        {
            //新增节点，插到链表头部
            node = new HashMapNode<K, V>();
            node.k = k;
            node.v = v;
            node.next = this.tbl[idx];
            this.tbl[idx] = node;

            //插入到双链表尾部
            var last_elem_node = this.elem_node_tail.prev_elem_node;
            last_elem_node.next_elem_node = node;
            node.prev_elem_node = last_elem_node;
            node.next_elem_node = this.elem_node_tail;
            this.elem_node_tail.prev_elem_node = node;

            ++ this.sz;
            ++ this.dirty;
        }
        else {
            node.v = v;
        }
    }

    public HashMapIter<K, V> iter()
    {
        return new HashMapIter<K, V>(this, this.elem_node_head.next_elem_node);
    }

    public Iter<K> key_iter()
    {
        var it = this.iter();
        return []{
            public K get()
            {
                return it.key();
            }

            public bool after_end()
            {
                return it.after_end();
            }

            public void inc()
            {
                it.inc();
            }
        };
    }

    public Iter<V> value_iter()
    {
        var it = this.iter();
        return []{
            public V get()
            {
                return it.value();
            }

            public bool after_end()
            {
                return it.after_end();
            }

            public void inc()
            {
                it.inc();
            }
        };
    }

    public HashMapIter<K, V> find(K k)
    {
        HashMapNode<K, V> node;
        long idx = this.find_node(this.tbl, k, ref node);
        if (node === nil)
        {
            return nil;
        }
        return new HashMapIter<K, V>(this, node);
    }

    public bool contains_key(K k)
    {
        HashMapNode<K, V> node;
        this.find_node(this.tbl, k, ref node);
        return node !== nil;
    }

    HashMapNode<K, V>[] tbl;
    HashMapNode<K, V> elem_node_head, elem_node_tail; //用两个虚拟节点标识节点双链表的头尾，这在做操作的时候比较方便
    long sz;
    long dirty;
}

public class HashMapIter<K, V>
{
    HashMapIter(HashMap<K, V> hm, HashMapNode<K, V> node)
    {
        this.hm = hm;
        this.nd = node;
        this.dirty = hm.dirty;
    }

    void check_dirty()
    {
        if (this.hm.dirty != this.dirty)
        {
            throw(new IterDirty());
        }
    }

    public bool _after_end()
    {
        return this.nd === this.hm.elem_node_tail;
    }

    public bool after_end()
    {
        this.check_dirty();
        return this._after_end();
    }

    HashMapNode<K, V> node()
    {
        debug.assert(this.nd !== nil, "bug");
        this.check_dirty();
        if (this._after_end())
        {
            throw(new IterOutOfRange());
        }
        return this.nd;
    }

    public Pair<K, V> get()
    {
        var nd = this.node();
        return make_pair(nd.k, nd.v);
    }

    public K key()
    {
        return this.node().k;
    }

    public V value()
    {
        return this.node().v;
    }

    public void set(V v)
    {
        this.node().v = v;
    }

    public void inc()
    {
        this.check_dirty();
        if (this._after_end())
        {
            throw(new IterOutOfRange());
        }
        this.nd = this.nd.next_elem_node;
        debug.assert(this.nd !== nil, "bug");
    }

    HashMap<K, V> hm;
    HashMapNode<K, V> nd;
    long dirty;
}
