public class Vector<E>
{
    public Vector(Iter<E> data_iter)
    {
        this.arr = (new E[8])[: 0];
        if (data_iter !== nil)
        {
            this.extend(data_iter);
        }
    }

    public void extend(Iter<E> data_iter)
    {
        foreach (var e : data_iter)
        {
            this.add(e);
        }
    }

    public String repr()
    {
        var sl = new String[this.size() + 2];
        sl[0] = "<%T [".(this);
        long i = 1;
        long sz = this.arr.size();
        for (; i <= sz; ++ i)
        {
            E e = this.arr[i - 1];
            if (i == 1)
            {
                sl[i] = "%r".(e);
            }
            else
            {
                sl[i] = ", %r".(e);
            }
        }
        sl[i] = "]>";
        ++ i;
        return "".join(sl[: i].iter());
    }

    public long size()
    {
        return this.arr.size();
    }

    public void add(E e)
    {
        long sz = this.arr.size();
        this.reserve(sz + 1);
        this.arr = this.arr[: sz + 1];
        this.arr[sz] = e;
    }

    public void reserve(long sz)
    {
        long new_cap = this.arr.cap();
        if (new_cap >= sz)
        {
            return;
        }
        while (new_cap < sz)
        {
            //若空间小则先快速增长
            if (new_cap < 1L << 15)
            {
                new_cap *= 3;
            }
            else
            {
                new_cap += new_cap / 2;
            }
        }
        var new_arr = new E[new_cap];
        new_arr.copy_from(this.arr);
        this.arr = new_arr[: this.arr.size()];
    }

    public VectorIter<E> iter()
    {
        return new VectorIter<E>(this, 0);
    }

    public E get(long idx)
    {
        return this.arr[idx];
    }

    public void set(long idx, E e)
    {
        this.arr[idx] = e;
    }

    void shrink()
    {
        long sz = this.size(), cap = this.arr.cap();
        //缩容时机：空间占用太大且元素数量过少
        if (cap > 1L << 10 && sz < cap / 4)
        {
            //缩容策略：缩到sz的双倍大小
            long new_cap = sz * 2;
            var new_arr = new E[new_cap];
            new_arr.copy_from(this.arr);
            this.arr = new_arr[: this.arr.size()];
        }
    }

    public E pop(long idx)
    {
        //弹出idx位置的元素，其后的元素往前移动
        E e = this.arr[idx];

        long last_idx = this.size() - 1;
        for (; idx < last_idx; ++ idx)
        {
            this.arr[idx] = this.arr[idx + 1];
        }
        this.arr[last_idx] = zero_value<E>();
        this.arr = this.arr[: last_idx];
        this.shrink();

        return e;
    }

    public void resize(long sz)
    {
        if (sz < 0)
        {
            throw(new ValueError("%d".(sz)));
        }
        this.reserve(sz);

        long curr_sz = this.size();
        //如果是缩小，则将缩小的区间的元素置空
        E zv = zero_value<E>();
        for (long i = sz; i < curr_sz; ++ i)
        {
            this.arr[i] = zv;
        }

        this.arr = this.arr[: sz];
        this.shrink();
    }

    public E[] to_array()
    {
        var arr = new E[this.size()];
        arr.copy_from(this.arr);
        return arr;
    }

    E[] arr;
}

public class VectorIter<E>
{
    public VectorIter(Vector<E> v, long i)
    {
        this.vec = v;
        this.idx = i;
    }

    public bool before_begin()
    {
        return this.idx < 0;
    }

    public bool after_end()
    {
        return this.idx >= this.vec.size();
    }

    public E get()
    {
        return this.vec.get(this.idx);
    }

    public void set(E e)
    {
        this.vec.set(this.idx, e);
    }

    public void inc()
    {
        if (this.before_begin())
        {
            this.idx = 0;
            return;
        }
        if (this.after_end())
        {
            throw(new IterOutOfRange());
        }
        ++ this.idx;
    }

    public void dec()
    {
        if (this.before_begin())
        {
            throw(new IterOutOfRange());
        }
        if (this.after_end())
        {
            this.idx = this.vec.size() - 1;
            return;
        }
        -- this.idx;
    }

    Vector<E>   vec;
    long        idx;
}
