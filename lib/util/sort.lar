!<<

import (
    "sort"
)

!>>

interface SortIntf
{
    long len();
    bool less(long i, long j);
    void swap(long i, long j);
}

!<<

func lar_go_func_@<<_no_use>>() {
    _ = sort.Interface(nil) //规避Go层面的sort package未使用的错误
}

type sortIntfImpl struct {
    lar_fiber   *lar_go_stru_fiber
    si          lar_intf_@<<SortIntf>>
}

func (sii *sortIntfImpl) Len() int {
    return int(sii.si.lar_method_@<<len>>(sii.lar_fiber))
}

func (sii *sortIntfImpl) Less(i, j int) bool {
    return sii.si.lar_method_@<<less>>(sii.lar_fiber, int64(i), int64(j))
}

func (sii *sortIntfImpl) Swap(i, j int) {
    sii.si.lar_method_@<<swap>>(sii.lar_fiber, int64(i), int64(j))
}

!>>

//对数组进行排序
public void sort<T>(T[] a)
{
    var si = []{
        long len()
        {
            return a.size();
        }

        bool less(long i, long j)
        {
            return cmp(a[i], a[j]) < 0;
        }

        void swap(long i, long j)
        {
            swap(ref a[i], ref a[j]);
        }
    };
    !<<
    sort.Sort(&sortIntfImpl{
        lar_fiber:  lar_fiber,
        si:         l_si,
    })
    !>>
}
