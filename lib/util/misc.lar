import math/rand;

!<<

import (
    "unsafe"
)

!>>

long hash_float(float n)
{
    if (n == 0.0f || n == -0.0f) {
        return 0;
    }
    !<<
    return int64(*(*uint32)(unsafe.Pointer(&l_n)))
    !>>
}

long hash_double(double n)
{
    if (n == 0.0 || n == -0.0) {
        return 0;
    }
    !<<
    return *(*int64)(unsafe.Pointer(&l_n))
    !>>
}

//一个随机的hash因子，主要用于每个进程计算hash值的随机化
//为避免初始化依赖引起问题，这个的赋值用native code在第一次用到的时候进行
final ulong rand_hash_factor = init_rand_hash_factor();

ulong init_rand_hash_factor()
{
    for (var i = 0; i < 100; ++ i)
    {
        var rhf = (ulong)rand.rand_n(LONG_MAX) * (ulong)rand.rand_n(LONG_MAX);
        if (rhf != 0)
        {
            return rhf;
        }
    }
    throw("运气不好？检查一下随机数产生器吧");
}

public interface Hashable
{
    public long hash();
}

//通用的计算hash的方法，保证返回非负
public long hash<T>(T t)
{
    long h;

#use
    h = hash_double(t);
#oruse
    h = hash_float(t);
#oruse
    Any[] _assert_T_is_Any = (T[])nil;
    h = assert_type<Hashable>(t).hash();
#oruse
    h = (long)t;
#oruse
    h = t.hash();
#enduse

    /*
    这个算法是为了防止hash冲突序列的重复攻击
    即攻击者若找到了针对某个rhf（rand_hash_factor）的hash冲突列表h1，h2……，使得它们的hash值的末x位相同，这个序列对于其他rhf则不起效
    关注末x位是因为本模块下的hash_map实现用的表大小是2的幂
    其他一些语言，例如python是在特定对象，例如字符串的hash算法中增加随机种子来防攻击，larva则统一在这里进行
    严格来说具体对象也应按实际情况来进行一些防攻击策略，例如如果攻击者找到了一堆字符串s1，s2……，其hash方法返回都相同，那么这个hash返回也是一样的
    */
    ulong uh = (ulong)h * (rand_hash_factor | 1);
    return (long)(((uh >> 32) ^ uh) + rand_hash_factor) & LONG_MAX;
}

public int cmp<T>(T a, T b)
{
#use
    return a.cmp(b);
#oruse
    if (a < b)
    {
        return -1;
    }
    if (a > b)
    {
        return 1;
    }
    return 0;
#enduse
}

public bool eq<T>(T a, T b)
{
#use
    return a.eq(b);
#oruse
    return a.cmp(b) == 0;
#oruse
    return a === b;
#oruse
    return a == b;
#enduse
}

public void swap<T>(ref T a, ref T b)
{
    T tmp = a;
    a = b;
    b = tmp;
}

public T min<T>(T a, T b)
{
    if (cmp(a, b) < 0)
    {
        return a;
    }
    return b;
}

public T max<T>(T a, T b)
{
    if (cmp(a, b) > 0)
    {
        return a;
    }
    return b;
}
