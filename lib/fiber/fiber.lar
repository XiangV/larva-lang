import time;

!<<

import (
    "time"
)

!>>

public void start_new(Callable callee)
{
    var n = "fiber_%d".((long)(time.time() * 1e6));

    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_cancel(nil, lar_str_to_go_str(l_n))
    go lar_booter_start_fiber(new_lar_fiber, cancel, l_callee, nil)
    !>>
}

public class Worker
{
    Worker()
    {
        this.ch = new Chan<Catched<Throwable>>(1);
    }

    public Catched<Throwable> wait()
    {
        return this.ch.recv(ref _);
    }

    Chan<Catched<Throwable>> ch;
}

public Worker start_worker(Callable callee)
{
    var n = "fiber_worker_%d".((long)(time.time() * 1e6));
    var w = new Worker();

    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_cancel(lar_fiber, lar_str_to_go_str(l_n))
    go lar_booter_start_fiber(new_lar_fiber, cancel, l_callee, l_w.m_ch.ch)
    !>>

    return w;
}

public void set_name(String n)
{
    if (n !== nil)
    {
        !<<
        lar_fiber.set_name(lar_str_to_go_str(l_n))
        !>>
    }
}

public String name()
{
    !<<
    return lar_str_from_go_str(lar_fiber.name())
    !>>
}

public bool is_canceled()
{
    !<<
    return lar_fiber.is_canceled()
    !>>
}

public class Canceled
{
    public bool is_timeout()
    {
        return this._is_timeout;
    }

    public String str()
    {
        return "context已被%s取消".("超时" if this.is_timeout() else "");
    }

    bool _is_timeout;
}

public void throw_if_canceled()
{
    !<<
    lar_fiber.throw_if_canceled()
    !>>
}

//从当前ctx生成一个WithCancel ctx作为新的ctx，调用结束后cancel
public void call_with_cancel(Callable callee)
{
    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_cancel(lar_fiber, lar_fiber.name())
    lar_fiber = new_lar_fiber
    defer cancel()
    !>>

    callee.call();
}

//从当前ctx生成一个WithTimeout ctx作为新的ctx，调用结束后cancel，timeout若为0或者负数，则相当于调用callee之前就被cancel了
public void call_with_timeout(double timeout, Callable callee)
{
    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_timeout(lar_fiber, lar_fiber.name(), time.Duration(l_timeout * 1e9))
    lar_fiber = new_lar_fiber
    defer cancel()
    !>>

    callee.call();
}
