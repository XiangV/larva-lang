import time;

!<<

import (
    "context"
    "time"
)

type lar_go_stru_fiber struct {
    _name string
    _ctx  context.Context
}

func (lar_fiber *lar_go_stru_fiber) name() string {
    return lar_fiber._name
}

func (lar_fiber *lar_go_stru_fiber) set_name(name string) {
    lar_fiber._name = name
}

func (lar_fiber *lar_go_stru_fiber) ctx() context.Context {
    return lar_fiber._ctx
}

func (lar_fiber *lar_go_stru_fiber) is_canceled() bool {
    select {
    case <-lar_fiber.ctx().Done():
        err := lar_fiber.ctx().Err()
        if err == nil {
            lar_func_@<<:throw>>(lar_fiber, lar_str_from_go_str("context未被正确取消：Err返回nil"))
        }
        return true
    default:
        return false
    }
}

func (lar_fiber *lar_go_stru_fiber) throw_if_canceled() {
    if lar_fiber.is_canceled() {
        lar_func_@<<:throw>>(lar_fiber, &lar_cls_@<<Canceled>>{
            m__is_timeout: lar_fiber.ctx().Err() == context.DeadlineExceeded,
        })
    }
}

func (lar_fiber *lar_go_stru_fiber) throw_when_canceled() {
    lar_fiber.throw_if_canceled()
    lar_func_@<<:throw>>(lar_fiber, lar_str_from_go_str("调用lar_fiber.throw_when_canceled()时context未被正确取消"))
}

func lar_go_func_new_fiber_ctx_with_cancel(lar_fiber *lar_go_stru_fiber, name string) (new_lar_fiber *lar_go_stru_fiber,
                                                                                       cancel context.CancelFunc) {
    var (
        par_ctx context.Context
        ctx     context.Context
    )
    if lar_fiber == nil {
        par_ctx = context.Background()
    } else {
        par_ctx = lar_fiber.ctx()
    }
    ctx, cancel = context.WithCancel(par_ctx)

    new_lar_fiber = &lar_go_stru_fiber{
        _name: name,
        _ctx:  ctx,
    }

    return
}

func lar_go_func_new_fiber_ctx_with_timeout(lar_fiber *lar_go_stru_fiber, name string, timeout time.Duration) (new_lar_fiber *lar_go_stru_fiber,
                                                                                                               cancel context.CancelFunc) {
    var ctx context.Context
    ctx, cancel = context.WithTimeout(lar_fiber.ctx(), timeout)

    new_lar_fiber = &lar_go_stru_fiber{
        _name: name,
        _ctx:  ctx,
    }

    return
}

!>>

public void start_new(Callable callee)
{
    var n = "fiber_%d".(cast<long>(time.time() * 1e6));

    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_cancel(nil, lar_str_to_go_str(l_n))
    go lar_booter_start_fiber(new_lar_fiber, cancel, l_callee, nil)
    !>>
}

public class Worker
{
    Worker()
    {
        this.ch = new Chan<Catched<Throwable>>(1);
    }

    public Catched<Throwable> wait()
    {
        return this.ch.recv(ref _);
    }

    Chan<Catched<Throwable>> ch;
}

public Worker start_worker(Callable callee)
{
    var n = "fiber_worker_%d".(cast<long>(time.time() * 1e6));
    var w = new Worker();

    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_cancel(lar_fiber, lar_str_to_go_str(l_n))
    go lar_booter_start_fiber(new_lar_fiber, cancel, l_callee, l_w.m_ch.ch)
    !>>

    return w;
}

public void set_name(String n)
{
    if (n !== nil)
    {
        !<<
        lar_fiber.set_name(lar_str_to_go_str(l_n))
        !>>
    }
}

public String name()
{
    !<<
    return lar_str_from_go_str(lar_fiber.name())
    !>>
}

public bool is_canceled()
{
    !<<
    return lar_fiber.is_canceled()
    !>>
}

public class Canceled
{
    public bool is_timeout()
    {
        return this._is_timeout;
    }

    public String str()
    {
        return "context已被%s取消".("超时" if this.is_timeout() else "");
    }

    bool _is_timeout;
}

public void throw_if_canceled()
{
    !<<
    lar_fiber.throw_if_canceled()
    !>>
}

//从当前ctx生成一个WithCancel ctx作为新的ctx，调用结束后cancel
public void call_with_cancel(Callable callee)
{
    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_cancel(lar_fiber, lar_fiber.name())
    lar_fiber = new_lar_fiber
    defer cancel()
    !>>

    callee.call();
}

//从当前ctx生成一个WithTimeout ctx作为新的ctx，调用结束后cancel，timeout若为0或者负数，则相当于调用callee之前就被cancel了
public void call_with_timeout(double timeout, Callable callee)
{
    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_timeout(lar_fiber, lar_fiber.name(), time.Duration(l_timeout * 1e9))
    lar_fiber = new_lar_fiber
    defer cancel()
    !>>

    callee.call();
}
