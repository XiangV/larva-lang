import time;

!<<

import (
    "context"
)

!>>

public void start_new(Runnable r)
{
    var name = "fiber_%d".((long)(time.time() * 1e6));

    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber(nil, lar_str_to_go_str(l_name))
    go lar_booter_start_fiber(new_lar_fiber, cancel, l_r, nil)
    !>>
}

public class Worker
{
    Worker()
    {
        this.ch = new Chan<Catched<Throwable>>(1);
    }

    public Catched<Throwable> wait()
    {
        return this.ch.recv(ref _);
    }

    Chan<Catched<Throwable>> ch;
}

public Worker start_worker(Runnable r)
{
    var name = "fiber_worker_%d".((long)(time.time() * 1e6));
    var w = new Worker()

    !<<
    new_lar_fiber, cancel := lar_go_func_new_fiber(lar_fiber, lar_str_to_go_str(l_name))
    go lar_booter_start_fiber(new_lar_fiber, cancel, l_r, l_w.m_ch.ch)
    !>>

    return w
}

public void set_name(String name)
{
    if (name !== nil)
    {
        !<<
        lar_fiber.set_name(lar_str_to_go_str(l_name))
        !>>
    }
}

public String name()
{
    !<<
    return lar_str_from_go_str(lar_fiber.name())
    !>>
}

public bool is_canceled()
{
    !<<
    select {
    case <-lar_fiber.ctx().Done():
        return true
    default:
        return false
    }
    !>>
}

public class Canceled
{
    public bool is_timeout()
    {
        return this._is_timeout;
    }

    public String str()
    {
        return "fiber已被%s取消".("超时" if this.is_timeout() else "");
    }

    bool _is_timeout;
}

public void throw_if_canceled()
{
    if (is_canceled())
    {
        bool is_timeout;
        !<<
        l_is_timeout = lar_fiber.ctx().Err() == context.DeadlineExceeded
        !>>
        throw(new Canceled{is_timeout});
    }
}
