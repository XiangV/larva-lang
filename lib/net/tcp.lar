import io, sync, fiber;

!<<

import (
    "net"
    "time"
)

!>>

public class TcpListener
{
    public TcpListener(String addr)
    {
        !<<
        tcp_addr, err := net.ResolveTCPAddr("tcp", lar_str_to_go_str(l_addr))
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        ntl, err := net.ListenTCP("tcp", tcp_addr)
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        this.ntl = ntl
        !>>

        this.accept_lock = new sync.Mutex();
    }

    public String addr()
    {
        !<<
        return lar_str_from_go_str(this.ntl.Addr().String())
        !>>
    }

    public TcpConn accept()
    {
        !<<
        var (
            ntc *net.TCPConn
            err error
        )
        lar_go_func_@<<io.io_with_ctx>>(
            lar_fiber,
            this.m_accept_lock,
            func () {
                this.ntl.SetDeadline(time.Time{}) //关闭deadline
            },
            func () bool {
                ntc, err = this.ntl.AcceptTCP()
                return err == nil
            },
            func () {
                this.ntl.SetDeadline(time.Unix(1, 0)) //设置一个已过期的deadline来打断Accept
            },
            func () {
                this.ntl.SetDeadline(time.Time{}) //关闭deadline
            },
        )
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        return &lar_cls_@<<TcpConn>>{
            ntc: ntc,
        }
        !>>
    }

    public void close()
    {
        !<<
        err := this.ntl.Close()
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    !<<
    ntl *net.TCPListener
    !>>

    sync.Mutex accept_lock;
}

public class TcpConn
{
    public String local_addr()
    {
        !<<
        return lar_str_from_go_str(this.ntc.LocalAddr().String())
        !>>
    }

    public String remote_addr()
    {
        !<<
        return lar_str_from_go_str(this.ntc.RemoteAddr().String())
        !>>
    }

    public long read(char[] buf)
    {
        !<<
        n, err := lar_go_func_@<<io.read>>(lar_fiber, this.ntc, l_buf.arr)
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        return int64(n)
        !>>
    }

    public void write(char[] buf)
    {
        !<<
        _, err := this.ntc.Write(l_buf.arr)
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    public void close()
    {
        !<<
        err := this.ntc.Close()
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    !<<
    ntc *net.TCPConn
    !>>
}
