import io;

!<<

import (
    "net"
)

!>>

public class TcpListener
{
    public TcpListener(String addr)
    {
        !<<
        tcp_addr, err := net.ResolveTCPAddr("tcp", lar_str_to_go_str(l_addr))
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        ntl, err := net.ListenTCP("tcp", tcp_addr)
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        this.ntl = ntl
        !>>
    }

    public String addr()
    {
        !<<
        return lar_str_from_go_str(this.ntl.Addr().String())
        !>>
    }

    public TcpConn accept()
    {
        !<<
        ntc, err := this.ntl.AcceptTCP()
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        return &lar_cls_@<<TcpConn>>{
            ntc: ntc,
        }
        !>>
    }

    public void close()
    {
        !<<
        err := this.ntl.Close()
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    !<<
    ntl *net.TCPListener
    !>>
}

public class TcpConn
{
    public String local_addr()
    {
        !<<
        return lar_str_from_go_str(this.ntc.LocalAddr().String())
        !>>
    }

    public String remote_addr()
    {
        !<<
        return lar_str_from_go_str(this.ntc.RemoteAddr().String())
        !>>
    }

    public long read(char[] buf)
    {
        !<<
        n, err := lar_go_func_@<<io.read>>(lar_fiber, this.ntc, l_buf.arr)
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        return int64(n)
        !>>
    }

    public void write(char[] buf)
    {
        !<<
        _, err := this.ntc.Write(l_buf.arr)
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    public void close()
    {
        !<<
        err := this.ntc.Close()
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    !<<
    ntc *net.TCPConn
    !>>
}
