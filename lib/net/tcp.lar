import io, fiber;

!<<

import (
    "net"
    "sync"
)

!>>

public class TcpListener
{
    public TcpListener(String addr)
    {
        !<<
        tcp_addr, err := net.ResolveTCPAddr("tcp", lar_str_to_go_str(l_addr))
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        ntl, err := net.ListenTCP("tcp", tcp_addr)
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        this.ntl = ntl
        !>>
    }

    public String addr()
    {
        !<<
        return lar_str_from_go_str(this.ntl.Addr().String())
        !>>
    }

    public TcpConn accept()
    {
        !<<
        var (
            ntc *net.TCPConn
            err error
        )
        lar_go_func_@<<io.deadline_interruptable_io_with_ctx>>(lar_fiber, &this.accept_lock, this.ntl.SetDeadline, func () bool {
            ntc, err = this.ntl.AcceptTCP()
            return err == nil
        })
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        return lar_go_func_@<<tcp_conn_from_native>>(lar_fiber, ntc)
        !>>
    }

    public void close()
    {
        !<<
        err := this.ntl.Close()
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    !<<
    ntl *net.TCPListener

    accept_lock sync.Mutex
    !>>
}

public class TcpConn
{
    public TcpConn(String addr)
    {
        !<<
        conn, err := (&net.Dialer{}).DialContext(lar_fiber.ctx(), "tcp", lar_str_to_go_str(l_addr))
        if err != nil {
            lar_fiber.throw_if_canceled()
            lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        }
        this.ntc = conn.(*net.TCPConn)
        !>>
    }

    public String local_addr()
    {
        !<<
        return lar_str_from_go_str(this.ntc.LocalAddr().String())
        !>>
    }

    public String remote_addr()
    {
        !<<
        return lar_str_from_go_str(this.ntc.RemoteAddr().String())
        !>>
    }

    public long read(char[] buf)
    {
        !<<
        var (
            n   int
            err error
        )
        lar_go_func_@<<io.deadline_interruptable_io_with_ctx>>(lar_fiber, &this.rd_lock, this.ntc.SetReadDeadline, func () bool {
            n, err = lar_go_func_@<<io.read>>(lar_fiber, this.ntc, l_buf.arr)
            return err == nil
        })
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        return int64(n)
        !>>
    }

    public void write(char[] buf)
    {
        !<<
        var err error
        lar_go_func_@<<io.deadline_interruptable_io_with_ctx>>(lar_fiber, &this.wr_lock, this.ntc.SetWriteDeadline, func () bool {
            _, err := this.ntc.Write(l_buf.arr)
            return err == nil
        })
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    public void close()
    {
        !<<
        err := this.ntc.Close()
        lar_go_func_@<<throw_on_go_err>>(lar_fiber, err)
        !>>
    }

    !<<
    ntc *net.TCPConn

    rd_lock sync.Mutex
    wr_lock sync.Mutex
    !>>
}

!<<

func lar_go_func_@<<tcp_conn_from_native>>(lar_fiber *lar_go_stru_fiber, ntc *net.TCPConn) *lar_cls_@<<TcpConn>> {
    return &lar_cls_@<<TcpConn>>{
        ntc: ntc,
    }
}

!>>
