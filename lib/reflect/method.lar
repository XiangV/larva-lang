/*
这里的设计是将Method作为class而不是直接用MethodImpl这样的interface，突出Method类型本身的意义，将MethodImpl设计为比较low-level的内部实现接口
*/

interface MethodImpl
{
    bool can_call(GoAny args, ref int err_arg_idx);
    bool call(GoAny args, ref Any ret); //返回true表示有返回值存在ret，否则表示一个返回类型为void的方法调用
}

public class Method
{
    /*
    若返回false，则err_arg_idx指示错误信息：参数数量不符合为-1，否则为错误参数的下标
    若返回true则err_arg_idx值无意义
    */
    public bool can_call(Value[] args, ref int err_arg_idx)
    {
        return this.m.can_call(values_to_raw_args(args), ref err_arg_idx);
    }

    public Value call(Value[] args)
    {
        Any ret;
        if (this.m.call(values_to_raw_args(args), ref ret))
        {
            return value_of(ret);
        }
        return nil;
    }

    MethodImpl m;
}

Method make_method(GoAny method_raw)
{
    !<<
    m := l_method_raw.(*lar_reflect_method_type)
    !>>
    return new Method{
        m: []{
            bool can_call(GoAny args, ref int err_arg_idx)
            {
                !<<
                err_arg_seq := m.can_call(l_args.([]*lar_reflect_method_arg_type))
                if err_arg_seq == 0 {
                    return true
                }
                if err_arg_seq < 0 {
                    *l_err_arg_idx = -1
                } else {
                    *l_err_arg_idx = err_arg_seq - 1
                }
                return false
                !>>
            }

            bool call(GoAny args, ref Any ret)
            {
                int err_arg_seq;
                bool has_ret;
                !<<
                l_err_arg_seq, *l_ret, l_has_ret = m.call(lar_fiber, l_args.([]*lar_reflect_method_arg_type))
                !>>
                if (err_arg_seq < 0)
                {
                    throw(new Error{"参数数量错误，无法调用方法"});
                }
                else if (err_arg_seq > 0)
                {
                    throw(new Error{"参数#%d类型错误，无法调用方法".(err_arg_seq)});
                }
                return has_ret;
            }
        },
    };
}
