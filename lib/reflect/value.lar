import __internal, util/iters;

interface Ref
{
    String type_name();
    Any get();
    bool can_set(Any a);
    void set(Any a);
}

public class Value
{
    public String str()
    {
        if (this.is_ref())
        {
            return this.repr();
        }
        return "%s".(this.v);
    }

    public String repr()
    {
        Any a;
        String tp;
        if (this.is_ref())
        {
            a = this.r.get();
            tp = "ref ".concat(this.r.type_name());
        }
        else
        {
            !<<
            l_a = this.m_v
            !>>
            tp = "%T".(a);
        }
        return "<Value of <%s> %r>".(tp, a);
    }

    //内部使用，不管是普通值还是ref指针都直接返回，用于lar_reflect_intf等更底层的接口
    GoAny get_raw()
    {
        return this.v;
    }

    public Any get()
    {
        if (this.is_ref())
        {
            return this.r.get();
        }
        !<<
        return this.m_v
        !>>
    }

    public String ref_type_name()
    {
        if (this.is_ref())
        {
            return this.r.type_name();
        }
        throw(new Error{"Value的值不是ref类型"});
    }

    public Type type()
    {
        return type_of(this.get());
    }

    public bool is_ref()
    {
        return this.r !== nil;
    }

    public bool can_set(Any a)
    {
        return this.is_ref() && this.r.can_set(a);
    }

    public void set(Any a)
    {
        this.r.set(a) if this.is_ref() else throw(new Error{"Value的值不是ref类型，不能set"});
    }

    Any get_instance()
    {
        Any a = this.get();
        bool ok;
        !<<
        _, l_ok = l_a.(lar_reflect_intf)
        !>>
        if (!ok)
        {
            throw(new Error{"‘%r’不是一个Larva的类实例".(this)});
        }
        return a;
    }

    //返回一个类实例的所有属性的ref值
    public Value[] attrs()
    {
        Any inst = this.get_instance();
        long attr_count;
        !<<
        ars := l_inst.(lar_reflect_intf).lar_reflect_attr_refs()
        l_attr_count = int64(len(ars))
        !>>
        var attrs = new Value[attr_count];
        for (long i = 0; i < attr_count; ++ i)
        {
            !<<
            ar := ars[l_i]
            !>>

            GoAny v;
            !<<
            l_v = ar.ptr
            !>>
            attrs[i] = new Value{
                v: v,
                r: []{
                    String type_name()
                    {
                        !<<
                        return lar_str_from_go_str(ar.tn)
                        !>>
                    }

                    Any get()
                    {
                        !<<
                        return ar.get()
                        !>>
                    }

                    bool can_set(Any a)
                    {
                        !<<
                        return ar.can_set(l_a)
                        !>>
                    }

                    void set(Any a)
                    {
                        bool ok;
                        !<<
                        l_ok = ar.set(l_a)
                        !>>
                        if (!ok)
                        {
                            String tn;
                            !<<
                            l_tn = lar_str_from_go_str(ar.tn)
                            !>>
                            throw(new Error{"无法将类型‘%T’的值赋值给类型‘%s’".(a, tn)});
                        }
                    }
                }
            };
        }
        return attrs;
    }

    public Method[] methods()
    {
        Any inst = this.get_instance();
        long method_count;
        !<<
        ms := l_inst.(lar_reflect_intf).lar_reflect_methods()
        l_method_count = int64(len(ms))
        !>>
        var methods = new Method[method_count];
        for (long i = 0; i < method_count; ++ i)
        {
            !<<
            m := ms[l_i]
            !>>

            methods[i] = new Method{
                //todo
            };
        }
        return methods;
    }

    GoAny v; //具体的值，如果是ref，则为一个指针
    Ref   r; //当为ref时，对其操作的接口，普通值的这个属性为nil
}

public Value value_of(Any a)
{
    get_larva_type_name(a);
    GoAny v;
    !<<
    l_v = l_a
    !>>
    return new Value{
        v: v,
    };
}

public Value value_of_ref<T>(ref T t)
{
    String name_of_T = type_name<T>();
    bool type_T_is_interface = is_interface<T>();

    GoAny v;
    !<<
    l_v = l_t
    !>>
    return new Value{
        v: v,
        r: []{
            String type_name()
            {
                return name_of_T;
            }

            Any get()
            {
                return t;
            }

            bool can_set(Any a)
            {
                if (a === nil)
                {
                    return type_T_is_interface;
                }
                return try_assert_type<T>(a, ref _);
            }

            void set(Any a)
            {
                T av;
                if ((a === nil && type_T_is_interface) || try_assert_type(a, ref av))
                {
                    t = av;
                    return;
                }
                throw(new Error{"无法将类型‘%T’的值赋值给类型‘%s’".(a, name_of_T)});
            }
        },
    };
}

GoAny[] values_to_raw(Value[] vs)
{
    return iters.map_array(vs.iter(), []{
        GoAny convert(Value v)
        {
            return v.get_raw();
        }
    });
}
