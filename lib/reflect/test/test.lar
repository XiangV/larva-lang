import testing, reflect;

interface ValueTester
{
    void assert(bool cond, Any a, String desc);
}

void test_value_of_ref<T>(ValueTester tester, T t, T new_t)
{
    var v = reflect.value_of_ref(ref t);
    tester.assert(v.get() === t, t, "取出的值和原始值不同");
    tester.assert(v.is_ref(), t, "is_ref为false");
    tester.assert(v.can_set(new_t), t, "can_set为false");
    var c = call_and_catch<reflect.Error>([-]{
        v.set(new_t);
    });
    tester.assert(c === nil, t, "set抛出了reflect.Error异常");
    tester.assert(v.get() === new_t, t, "set之后取出的值和期望值‘%r’不同".(new_t));
}

public void main()
{
    var r = new testing.CaseRunner();

    r.add_test_case("Type基础测试", [-]{
        testing.assert(reflect.type_of((Throwable)nil) === nil, "type_of(nil)");

        {
            GoAny ga;
            !<<
            l_ga = struct{}{}
            !>>
            var c = call_and_catch<reflect.NotLarvaObject>([-]{
                reflect.type_of(ga);
            });
            testing.assert(c !== nil, "对非larva对象执行type_of未抛出期望的异常");
        }

        {
            var tp_1 = reflect.type_of(1);
            var tp_2 = reflect.type_of(2);
            testing.assert(tp_1 === tp_2, "分别对int值执行type_of得到的Type对象不一样");
        }

        {
            foreach (var p: new Pair<Any, Any>[]{
                1:    0,
                true: false,
                1.f:  (float)0.0,
                "":   (String)nil,
            }.iter())
            {
                var tp = reflect.type_of(p.first());
                testing.assert(tp.zero_value().get() === p.second(), "Type[%s].zero_value测试失败".(tp));
            }
        }

        {
            var tester = []{
                void test(Any[] aa, bool expect_is_primitive)
                {
                    foreach (var a: aa.iter())
                    {
                        var tp = reflect.type_of(a);
                        testing.assert(tp.is_primitive() == expect_is_primitive, "Type[%s].is_primitive测试失败".(tp));
                    }
                }
            };
            tester.test(new Any[]{'x', 1, 2L, true, 1.f, 0.0}, true);
            tester.test(new Any[]{"abc", new int[0], (char[])nil}, false);
        }
    });
    r.add_test_case("Value基础测试", [-]{
        String func_name = "UNKNOWN";
        var tester = []{
            void assert(bool cond, Any a, String desc)
            {
                testing.assert(cond, "对类型‘%T’的值‘%r’执行%s后：%s".(a, a, func_name, desc));
            }
        };

        {
            func_name = "value_of";
            foreach (var a: new Any[]{'x', 1, 2L, true, 1.f, 0.0, "abc", new int[0], (char[])nil}.iter())
            {
                var v = reflect.value_of(a);
                tester.assert(v.get() === a, a, "取出的值和原始值不同");
                tester.assert(!v.is_ref(), a, "is_ref为true");
                tester.assert(!v.can_set(a), a, "can_set为true");
                var c = call_and_catch<reflect.Error>([-]{
                    v.set(a);
                });
                tester.assert(c !== nil, a, "set未抛出期望的异常");
            }
        }

        {
            func_name = "value_of_ref";
            test_value_of_ref(tester, 'x', 'y');
            test_value_of_ref(tester, +1, +2);
            test_value_of_ref(tester, 2L, 3L);
            test_value_of_ref(tester, true, false);
            test_value_of_ref(tester, 1.f, 2.f);
            test_value_of_ref(tester, 0.0, 100.0);
            test_value_of_ref(tester, "abc", "def");
            test_value_of_ref(tester, new int[0], new int[1]);
            test_value_of_ref(tester, (char[])nil, "xyz".to_char_array());
            test_value_of_ref<Any>(tester, 123, "hello");
            test_value_of_ref<Throwable>(tester, "error", new ValueError("test"));
        }
    });
    r.add_test_case("new对象相关测试", [-]{
    });
    r.add_test_case("字段存取测试", [-]{
    });
    r.add_test_case("方法调用测试", [-]{
    });

    r.run();
}
