import testing, reflect;

interface ValueTester
{
    void assert(bool cond, String desc);
}

//attr的测试中也会用到这个
void test_ref_value(ValueTester tester, reflect.Value v, Any t, Any new_t, bool expect_can_set)
{
    tester.assert(v.get() === t, "取出的值和原始值不同");
    tester.assert(v.is_ref(), "is_ref为false");

    var tester_of_setting = []{
        void assert(bool cond, String desc)
        {
            tester.assert(cond, "set类型‘%T’的值‘%r’：%s".(new_t, new_t, desc));
        }
    };

    bool can_set = v.can_set(new_t);
    var c = call_and_catch<reflect.Error>([-]{
        v.set(new_t);
    });
    if (expect_can_set)
    {
        tester_of_setting.assert(can_set, "can_set为false");
        tester_of_setting.assert(c === nil, "set抛出了reflect.Error异常");
        tester_of_setting.assert(v.get() === new_t, "set之后取出的值和期望值不同");
    }
    else
    {
        tester_of_setting.assert(!can_set, "can_set为true");
        tester_of_setting.assert(c !== nil, "set没有抛出期望的reflect.Error异常");
        tester_of_setting.assert(v.get() === t, "set失败之后值被改变");
    }
}

void test_value_of_ref<T>(T t, Any new_t, bool expect_can_set)
{
    var a = t; //保存一下，避免t被set后报错信息有误
    var tester = []{
        void assert(bool cond, String desc)
        {
            testing.assert(cond, "对类型‘%T’的值‘%r’执行value_of_ref后：%s".(a, a, desc));
        }
    };
    
    test_ref_value(tester, reflect.value_of_ref(ref t), t, new_t, expect_can_set);
}

void test_value()
{
    String func_name = "UNKNOWN";
    var tester = []{
        void assert(bool cond, Any a, String desc)
        {
            testing.assert(cond, "对类型‘%T’的值‘%r’执行%s后：%s".(a, a, func_name, desc));
        }
    };

    {
        func_name = "value_of";
        foreach (var a: new Any[]{'x', 1, 2L, true, 1.f, 0.0, "abc", new int[0], (char[])nil}.iter())
        {
            var v = reflect.value_of(a);
            tester.assert(v.get() === a, a, "取出的值和原始值不同");
            tester.assert(!v.is_ref(), a, "is_ref为true");
            tester.assert(!v.can_set(a), a, "can_set为true");
            var c = call_and_catch<reflect.Error>([-]{
                v.set(a);
            });
            tester.assert(c !== nil, a, "set未抛出期望的异常");
        }
    }

    {
        test_value_of_ref('x', 'y', true);
        test_value_of_ref(+1, +2, true);
        test_value_of_ref(2L, 3L, true);
        test_value_of_ref(true, false, true);
        test_value_of_ref(1.f, 2.f, true);
        test_value_of_ref(0.0, 100.0, true);
        test_value_of_ref("abc", "def", true);
        test_value_of_ref("abc", (String)nil, true);
        test_value_of_ref(new int[0], new int[1], true);
        test_value_of_ref((char[])nil, "xyz".to_char_array(), true);
        test_value_of_ref<Any>(123, "hello", true);
        test_value_of_ref<Any>(nil, nil, true);
        test_value_of_ref<Throwable>("error", new ValueError("test"), true);
        test_value_of_ref<Throwable>(nil, nil, true);

        test_value_of_ref('x', 1, false);
        test_value_of_ref(true, 1L, false);
        test_value_of_ref(1.f, 1.2, false);
        test_value_of_ref(0.9, nil, false);
        test_value_of_ref("abc", nil, false);
        test_value_of_ref<Throwable>(nil, new int[0], false);
    }

    {
        func_name = "value_of_ref";
        Any a;
        var v = reflect.value_of_ref(ref a);
        tester.assert(v.type() === nil, a, "type返回的类型不为nil");
        var rtn = v.ref_type_name();
        tester.assert(rtn.eq("Any"), a, "ref_type_name返回的类型名为‘%s’".(rtn));
    }

    {
        func_name = "value_of";
        Any a = 1;
        var v = reflect.value_of(a);
        var c = call_and_catch<reflect.Error>([-]{
            v.ref_type_name();
        });
        tester.assert(c !== nil, a, "ref_type_name未抛出预期的异常");
    }
}
