import testing, reflect;

class CantNewInstanceA
{
}

class CantNewInstanceB
{
    CantNewInstanceB()
    {
    }
}

class CanNewInstance
{
    public CanNewInstance(int a, String b)
    {
        this.a = a;
        this.b = b;
    }

    int a;
    String b;
}

final int       A_VAL = 148;
final String    B_VAL = "259";

void test_new_instance()
{
    reflect.Type tp;
    var tester = []{
        void assert(bool cond, String desc)
        {
            testing.assert(cond, "Type‘%s’：%s".(tp.name(), desc));
        }
    };

    foreach (var a: new Any[]{1, []{}, (CantNewInstanceA)nil, (CantNewInstanceB)nil}.iter())
    {
        tp = reflect.type_of(a);
        bool has_constructor;
        tester.assert(!tp.can_new_instance(new Value[]{}, ref has_constructor, ref _), "can_new_instance返回true");
        tester.assert(!has_constructor, "can_new_instance设置has_constructor为true");
        var c = call_and_catch<reflect.Error>([-]{
            tp.new_instance(new reflect.Value[]{});
        });
        tester.assert(c !== nil, "new_instance未抛出预期的异常");
    }

    var
        INT_FOR_REF     = 0,
        STR_FOR_REF     = "",
    ;
    var
        INT_VAL         = reflect.value_of(A_VAL),
        REF_INT_VAL     = reflect.value_of_ref(ref INT_FOR_REF),
        STR_VAL         = reflect.value_of(B_VAL),
        REF_STR_VAL     = reflect.value_of_ref(ref STR_FOR_REF),
    ;

    {
        tp = reflect.type_of((CanNewInstance)nil);

        foreach (var p: new Pair<reflect.Value[], int>[]{
            {}:                     -1,
            {INT_VAL}:              -1,
            {REF_INT_VAL, INT_VAL}: 0,
            {INT_VAL, REF_STR_VAL}: 1,
        }.iter())
        {
            var args = p.first();
            var expect_err_arg_idx = p.second();
            bool has_constructor;
            int err_arg_idx;
            tester.assert(!tp.can_new_instance(args, ref has_constructor, ref err_arg_idx), "args‘%r’：can_new_instance返回true".(args));
            tester.assert(has_constructor, "args‘%r’：can_new_instance设置has_constructor为false".(args));
            tester.assert(err_arg_idx != expect_err_arg_idx,
                          "args‘%r’：can_new_instance设置的err_arg_idx[%d]不等于期望值[%d]".(args, err_arg_idx, expect_err_arg_idx));
            var c = call_and_catch<reflect.Error>([-]{
                tp.new_instance(args);
            });
            tester.assert(c !== nil, "new_instance未抛出预期的异常");
        }
    }

    {
        tp = reflect.type_of((CanNewInstance)nil);
        var args = new reflect.Value[]{INT_VAL, STR_VAL};

        bool has_constructor;
        tester.assert(tp.can_new_instance(args, ref has_constructor, ref _), "can_new_instance返回false");
        CanNewInstance c;
        tester.assert(try_assert_type(tp.new_instance(args), ref c), "new_instance返回的值不是CanNewInstance的实例");
        tester.assert(c.a == A_VAL && c.b.eq(B_VAL), "new_instance返回的实例的属性值错误");
    }
}
