import testing, reflect, util/iters;

final int
    X_AFTER_INIT    = -987,
    X_AFTER_F1      = 123,
    X_AFTER_F2      = 456,
    X_AFTER_F3      = 789,
    X_AFTER_F4      = 012,
;

void f1(ref int x)
{
    defer
    {
        x = X_AFTER_F1;
    }
}

int f2(ref int x, String s)
{
    defer
    {
        x = X_AFTER_F2;
    }
    return -1 if s === nil else x + (int)s.parse_long(0);
}

Any f3(ref int x, Any a)
{
    defer
    {
        x = X_AFTER_F3;
    }
    return (Any)nil if a === nil else (Any)(x * assert_type<int>(a));
}

void f4(ref int x, long a, ref long b)
{
    defer
    {
        x = X_AFTER_F4;
    }
    b = (long)x - a * b;
}

interface XKeeper
{
    int x();
}

class ForMethodTesting
{
    public ForMethodTesting(int x)
    {
        this._x = x;
    }

    int x()
    {
        return this._x;
    }

    public void f1()
    {
        f1(ref this._x);
    }

    public int f2(String s)
    {
        return f2(ref this._x, s);
    }

    public Any f3(Any a)
    {
        return f3(ref this._x, a);
    }

    public void f4(long a, ref long b)
    {
        f4(ref this._x, a, ref b);
    }

    int _x;
}

class ArgInfo
{
    bool            is_ref;
    String          type_name;
    reflect.Type    type;
}

interface MethodTester
{
    void test_invalid_call(reflect.Value[] args);
    void test_valid_call(reflect.Value[] args, reflect.Value expect_ret_v, int expect_x_after_call);
}

interface ValidCallTester
{
    void test(MethodTester mt);
}

void test_method_ex(XKeeper t, bool has_constructor)
{
    {
        var tester = []{
            void assert(bool cond, String desc)
            {
                testing.assert(cond, "Type‘%T’：%s".(t, desc));
            }
        };

        var tp = reflect.type_of(t);

        var mis = new reflect.MethodInfo[100];
        mis[0] = tp.constructor_info();
        var mc = 1 + mis[1 :].shallow_copy_from(tp.method_infos());
        tester.assert(mc == 5, "方法数量（含构造方法）不为5");
        mis = mis[: mc];

        var correct_names = new String[]{"ForMethodTesting", "f1", "f2", "f3", "f4"};
        var correct_ret_type_names = new String[]{"void", "void", "int", "Any", "void"};
        var correct_ret_types = new reflect.Type[]{nil, nil, reflect.type_of(1), nil, nil};
        var correct_arg_info_lists = new ArgInfo[][]{
            {
                new ArgInfo{false, "int", reflect.type_of(1)},
            },
            {
            },
            {
                new ArgInfo{false, "String", reflect.type_of("")},
            },
            {
                new ArgInfo{false, "Any", nil},
            },
            {
                new ArgInfo{false, "long", reflect.type_of(1L)},
                new ArgInfo{true, "long", reflect.type_of(1L)},
            },
        };

        for (int i = 0; i < 5; ++ i)
        {
            var mi = mis[i];
            if (i == 0 && !has_constructor)
            {
                tester.assert(mi === nil, "有非预期的构造方法");
                continue;
            }

            var correct_name = correct_names[i];
            var mn = mi.name();
            tester.assert(correct_name.eq(mn), "%s方法名应为‘%s’，而不是‘%s’".("构造" if i == 0 else "%d".(i), correct_name, mn));

            var mi_tester = []{
                void assert(bool cond, String desc)
                {
                    tester.assert(cond, "%s：%s".("构造方法" if i == 0 else "方法‘%s’".(mn), desc));
                }
            };

            mi_tester.assert(mi.cls() === tp, "cls返回的Type不是其所属的Type对象");

            var correct_rtn = correct_ret_type_names[i];
            var mrtn = mi.ret_type_name();
            mi_tester.assert(correct_rtn.eq(mrtn), "返回类型的类型名应为‘%s’，而不是‘%s’".(correct_rtn, mrtn));

            var correct_rtp = correct_ret_types[i];
            var mrtp = mi.ret_type();
            mi_tester.assert(correct_rtp === mrtp, "返回类型错误");

            var correct_ais = correct_arg_info_lists[i];
            var ac = correct_ais.size();
            var mais = mi.arg_infos();
            mi_tester.assert(ac == mais.size(), "参数数量不一致");
            for (long j = 0; j < ac; ++ j)
            {
                var mai_tester = []{
                    void assert(bool cond, String desc)
                    {
                        mi_tester.assert(cond, "参数#%d：%s".(j + 1, desc));
                    }
                };

                var correct_ai = correct_ais[j];
                var mai = mais[j];

                mai_tester.assert(correct_ai.is_ref == mai.is_ref(), "is_ref错误");
                mai_tester.assert(correct_ai.type_name.eq(mai.type_name()), "类型名错误");
                mai_tester.assert(correct_ai.type === mai.type(), "类型错误");
            }
        }
    }

    {
        var tester = []{
            void assert(bool cond, String desc)
            {
                testing.assert(cond, "‘%T’实例的Value：%s".(t, desc));
            }
        };

        tester.assert(t.x() == X_AFTER_INIT, "x的初始值‘%d’不为‘%d’".(t.x(), X_AFTER_INIT));

        var method_tester_maker = []{
            MethodTester make(String m_name, reflect.Method m)
            {
                var mt = []{
                    void assert(bool cond, reflect.Value[] args, String desc)
                    {
                        tester.assert(cond, "方法‘%s’，参数表‘%r’：%s".(m_name, args, desc));
                    }
                };

                return []{
                    void assert(bool cond, reflect.Value[] args, String desc)
                    {
                        mt.assert(cond, args, desc);
                    }

                    void test_invalid_call(reflect.Value[] args)
                    {
                        mt.assert(!m.can_call(args), args, "call_call返回true");
                    }

                    void test_valid_call(reflect.Value[] args, reflect.Value expect_ret_v, int expect_x_after_call)
                    {
                        mt.assert(m.can_call(args), args, "call_call返回false");
                        var ret_v = m.call(args);
                        mt.assert((ret_v === nil && expect_ret_v === nil) ||
                                  (ret_v !== nil && expect_ret_v !== nil && ret_v.get() === expect_ret_v.get()),
                                  args, "返回值错误");
                        mt.assert(t.x() == expect_x_after_call, args, "调用后x的值‘%d’与期望值‘%d’不一致".(t.x(), expect_x_after_call));
                    }
                };
            }
        };

        var v = reflect.value_of(t);
        var mis = v.type().method_infos();
        var ms = v.methods();
        tester.assert(mis.size() == 4 && ms.size() == 4, "方法数量不为4");

        //定义一些value和方法，简化invalid arg测试的数据准备代码
        var
            INT_FOR_REF     = 0,
            LONG_FOR_REF    = 0L,
            STR_FOR_REF     = "",
        ;
        var
            NIL_VAL         = reflect.value_of(nil),
            INT_VAL         = reflect.value_of(0),
            REF_INT_VAL     = reflect.value_of_ref(ref INT_FOR_REF),
            LONG_VAL        = reflect.value_of(0L),
            REF_LONG_VAL    = reflect.value_of_ref(ref LONG_FOR_REF),
            STR_VAL         = reflect.value_of(""),
            REF_STR_VAL     = reflect.value_of_ref(ref STR_FOR_REF),
        ;
        var as2vs_converter = []{
            reflect.Value[] convert(Any[] aa)
            {
                return iters.map_array(aa.iter(), []{
                    public reflect.Value convert(Any a)
                    {
                        return reflect.value_of(a);
                    }
                });
            }
        };

        //每个方法多个args测试用例
        var list_of_invalid_arg_lists = new reflect.Value[][][]{
            {
                {NIL_VAL},
                {INT_VAL},
                as2vs_converter.convert(new Any[]{"", new int[0], nil, 3L}),
            },
            {
                {},
                {NIL_VAL},
                {INT_VAL},
                {STR_VAL, STR_VAL},
                {REF_STR_VAL},
            },
            {
                {},
                {REF_INT_VAL},
                {INT_VAL, LONG_VAL},
            },
            {
                {},
                {LONG_VAL},
                {REF_LONG_VAL, LONG_VAL},
                {REF_LONG_VAL, REF_LONG_VAL},
            },
        };
        var valid_call_testers = new ValidCallTester[]{
            []{
                void test(MethodTester mt)
                {
                    mt.test_valid_call(new reflect.Value[]{}, nil, X_AFTER_F1);
                }
            },
            []{
                void test(MethodTester mt)
                {
                    mt.test_valid_call(new reflect.Value[]{reflect.value_of((String)nil)}, reflect.value_of(-1), X_AFTER_F2);
                    mt.test_valid_call(new reflect.Value[]{reflect.value_of("123")}, reflect.value_of(X_AFTER_F2 + 123), X_AFTER_F2);
                }
            },
            []{
                void test(MethodTester mt)
                {
                    mt.test_valid_call(new reflect.Value[]{NIL_VAL}, NIL_VAL, X_AFTER_F3);
                    mt.test_valid_call(new reflect.Value[]{reflect.value_of(135)}, reflect.value_of(X_AFTER_F3 * 135), X_AFTER_F3);
                }
            },
            []{
                void test(MethodTester mt)
                {
                    long a = 975;
                    long b = 246;
                    var av = reflect.value_of(a);
                    var ref_b_v = reflect.value_of_ref(ref b);
                    long old_b = b;
                    var args = new reflect.Value[]{av, ref_b_v};
                    mt.test_valid_call(args, nil, X_AFTER_F4);
                    mt.assert(b == (long)X_AFTER_F3 - a * old_b, args, "调用之后ref参数b的值错误");
                }
            },
        };

        for (int i = 0; i < 4; ++ i)
        {
            var mt = method_tester_maker.make(mis[i].name(), ms[i]);

            foreach (var invalid_args: list_of_invalid_arg_lists[i].iter())
            {
                mt.test_invalid_call(invalid_args);
            }

            valid_call_testers[i].test(mt);
        }
    }
}

void test_method()
{
    //使用同样的接口和实现来测试，一个是class实现一个是closure实现，区别在于class有构造方法
    test_method_ex(new ForMethodTesting(X_AFTER_INIT), true);

    int x = X_AFTER_INIT;
    test_method_ex([]{
        int x()
        {
            return x;
        }

        public void f1()
        {
            f1(ref x);
        }

        public int f2(String s)
        {
            return f2(ref x, s);
        }

        public Any f3(Any a)
        {
            return f3(ref x, a);
        }

        public void f4(long a, ref long b)
        {
            f4(ref x, a, ref b);
        }
    }, false);
}
