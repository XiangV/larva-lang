import __internal, debug, __array;

//类型对象全局唯一，即可以用===和!==判是否为同一类型，用一个map存放，程序启动时初始化

!<<

import (
    "reflect"
)

var lar_reflect_type_map map[string]*lar_cls_@<<Type>>

func lar_go_func_@<<init_type_map>>() {
    lar_reflect_type_map = map[string]*lar_cls_@<<Type>>{}

    //第一步：用Type对象填充map
    for _, zv := range lar_reflect_all_zvs {
        if zv == nil {
            panic("bug：lar_reflect_all_zvs有nil接口")
        }
        tn, is_go_type_name := lar_go_func_@<<__internal.reflect_type_name>>(zv)
        if is_go_type_name {
            panic("bug：lar_reflect_all_zvs有go的对象")
        }
        tn_go_str := lar_str_to_go_str(tn)
        if _, ok := lar_reflect_type_map[tn_go_str]; ok {
            panic("bug：lar_reflect_all_zvs存在重复类型的值")
        }
        if reflect.Zero(reflect.TypeOf(zv)).Interface() != zv {
            panic("bug：lar_reflect_all_zvs存在非零值")
        }

        tp := &lar_cls_@<<Type>>{
            m__name: tn,
            m_zv:    zv,
        }
        lar_reflect_type_map[tn_go_str] = tp
    }
    //第二步：初始化Type的其他信息，因为这个过程中可能会用到type_of，所以和上一步分开进行
    lar_fiber, cancel := lar_go_func_new_fiber_ctx_with_cancel(nil, "reflect.init_type_map")
    defer cancel()
    for _, tp := range lar_reflect_type_map {
        tp.lar_method_@<<init_attr_infos>>(lar_fiber)
        tp.lar_method_@<<init_method_infos>>(lar_fiber)
        tp.lar_method_@<<init_array_dim_count>>(lar_fiber)
    }
}

!>>

void __init()
{
    !<<
    lar_go_func_@<<init_type_map>>()
    !>>
}

public class Type
{
    public String str()
    {
        return this.name();
    }

    public String repr()
    {
        return "<reflect.Type %s>".(this.name());
    }

    public String name()
    {
        return this._name;
    }

    public Any zero_value()
    {
        return this.zv;
    }

    public bool is_primitive()
    {
        !<<
        _, ok := this.m_zv.(lar_reflect_intf)
        return !ok
        !>>
    }

    void throw_on_primitive()
    {
        if (this.is_primitive())
        {
            throw(new Error{"‘%s’是基础类型".(this.name())});
        }
    }

    public bool can_new_empty()
    {
        !<<
        if lri, ok := this.m_zv.(lar_reflect_intf); ok {
            return lri.lar_reflect_can_new_empty()
        }
        !>>
        return false;
    }

    public Any new_empty()
    {
        this.throw_on_primitive();
        Any a;
        !<<
        l_a = this.m_zv.(lar_reflect_intf).lar_reflect_new_empty()
        !>>
        if (a === nil)
        {
            throw(new Error{"‘%s’不支持new_empty操作".(this.name())});
        }
        return a;
    }

    public AttrInfo[] attr_infos()
    {
        this.throw_on_primitive();
        return this._attr_infos.shallow_copy();
    }

    void init_attr_infos()
    {
        if (this.is_primitive())
        {
            return;
        }

        long count;
        !<<
        ais := this.m_zv.(lar_reflect_intf).lar_reflect_attr_infos()
        l_count = int64(len(ais))
        !>>
        this._attr_infos = new AttrInfo[count];
        for (long i = 0; i < count; ++ i)
        {
            !<<
            ai := ais[l_i]
            !>>

            long tag_count;
            !<<
            l_tag_count = int64(len(ai.tags))
            !>>
            var attr_info_tags = new Pair<String, String>[tag_count];
            for (long j = 0; j < tag_count; ++ j)
            {
                String tag_name, tag_value;
                !<<
                tag := ai.tags[l_j]
                l_tag_name = lar_str_from_go_str(tag.name)
                l_tag_value = lar_str_from_go_str(tag.value)
                !>>
                attr_info_tags[j] = make_pair(tag_name, tag_value);
            }

            AttrInfo attr_info;
            !<<
            l_attr_info = &lar_cls_@<<AttrInfo>>{
                m__cls:         this,
                m__type_name:   lar_str_from_go_str(ai.tn),
                m__type:        lar_func_@<<type_of>>(lar_fiber, ai.zv),
                m__name:        lar_str_from_go_str(ai.name),
                m__tags:        l_attr_info_tags,
            }
            !>>
            this._attr_infos[i] = attr_info;
        }
    }

    public MethodInfo constructor_info()
    {
        this.throw_on_primitive();
        return this._method_infos[0];
    }

    public MethodInfo[] method_infos()
    {
        this.throw_on_primitive();
        return this._method_infos[1 :].shallow_copy();
    }

    void init_method_infos()
    {
        if (this.is_primitive())
        {
            return;
        }

        //构造方法为第一个元素
        long count;
        !<<
        mis := this.m_zv.(lar_reflect_intf).lar_reflect_method_infos()
        l_count = int64(len(mis))
        if l_count < 1 {
            panic("bug：lar_reflect_method_infos返回的列表为空")
        }
        !>>
        this._method_infos = new MethodInfo[count];
        for (long i = 0; i < count; ++ i)
        {
            !<<
            mi := mis[l_i]
            if l_i == 0 && mi == nil {
                //没有构造方法，略过第一个
                continue
            }
            !>>

            long arg_count;
            !<<
            l_arg_count = int64(len(mi.arg_infos))
            !>>
            var method_arg_infos = new MethodArgInfo[arg_count];
            for (long j = 0; j < arg_count; ++ j)
            {
                MethodArgInfo method_arg_info;
                !<<
                mai := mi.arg_infos[l_j]
                l_method_arg_info = &lar_cls_@<<MethodArgInfo>>{
                    m__is_ref:      mai.is_ref,
                    m__type_name:   lar_str_from_go_str(mai.tn),
                    m__type:        lar_func_@<<type_of>>(lar_fiber, mai.zv),
                }
                !>>
                method_arg_infos[j] = method_arg_info;
            }

            MethodInfo method_info;
            !<<
            l_method_info = &lar_cls_@<<MethodInfo>>{
                m__cls:             this,
                m__ret_type_name:   lar_str_from_go_str(mi.ret_tn),
                m__ret_type:        lar_func_@<<type_of>>(lar_fiber, mi.ret_zv),
                m__name:            lar_str_from_go_str(mi.name),
                m__arg_infos:       l_method_arg_infos,
            }
            !>>
            this._method_infos[i] = method_info;
        }
    }

    Method get_method_of_new()
    {
        GoAny method_raw;
        !<<
        m := this.m_zv.(lar_reflect_intf).lar_reflect_method_of_new()
        if m == nil {
            //不存在public构造方法
            return nil
        }
        l_method_raw = m
        !>>
        return make_method(method_raw);
    }

    /*
    若返回false：
        1 has_constructor指示是否存在public构造方法（基础类型视为无构造方法）
        2 若存在public构造方法，则err_arg_idx指示参数错误信息：参数数量不符合为-1，否则为错误参数的下标；
        3 若不存在public构造方法则err_arg_idx值无意义
    若返回true则has_constructor为true，err_arg_idx值无意义
    */
    public bool can_new_instance(Value[] args, ref bool has_constructor, ref int err_arg_idx)
    {
        has_constructor = false;

        if (this.is_primitive())
        {
            return false;
        }

        var m = this.get_method_of_new();
        if (m === nil)
        {
            return false;
        }

        has_constructor = true;
        return m.can_call(args, ref err_arg_idx);
    }

    public Any new_instance(Value[] args)
    {
        this.throw_on_primitive();

        var m = this.get_method_of_new();
        if (m === nil)
        {
            throw(new Error{"类型‘%s’没有public构造方法".(this.name())});
        }

        return m.call(args).get(); //call返回的Value必然不是nil，编译器保证
    }

    public long array_dim_count()
    {
        return this._array_dim_count;
    }

    void init_array_dim_count()
    {
        var name = this.name();
        this._array_dim_count = 0;
        while (name.has_suffix("[]"))
        {
            ++ this._array_dim_count;
            name = name.sub_str(0, name.len() - 2);
        }
    }

    public Any array_new(long[] sizes)
    {
        if (this.array_dim_count() <= 0)
        {
            throw(new Error{"类型‘%s’不是数组".(this.name())});
        }
        if (sizes.size() <= 0)
        {
            throw(new Error{"未指定数组第一维的size"});
        }
        if (sizes.size() > this.array_dim_count())
        {
            throw(new Error{"数组size数量[%d]超过了类型‘%s’的数组维度数[%d]".(sizes.size(), this.name(), this.array_dim_count())});
        }
        !<<
        return lar_go_func_@<<__array.new_arr>>(lar_fiber, this.m_zv, l_sizes.arr)
        !>>
    }

    String  _name; //类型名
    Any     zv;    //此类型的zero_value

    AttrInfo[]      _attr_infos;
    MethodInfo[]    _method_infos;      //至少一个元素，第一个元素为构造方法的信息，如果没有public构造方法则第一个元素为nil
    long            _array_dim_count;   //数组维度
}

//获取larva对象的类型名，即__internal.reflect_type_name支持的那些，失败则抛出异常
String get_larva_type_name(Any a)
{
    String tn;
    bool is_go_type_name;
    !<<
    l_tn, l_is_go_type_name = lar_go_func_@<<__internal.reflect_type_name>>(l_a)
    !>>
    if (is_go_type_name)
    {
        throw(new NotLarvaObject{tn});
    }
    return tn;
}

//返回输入对象的类型，如果输入nil接口，则返回nil
public Type type_of(Any a)
{
    if (a === nil)
    {
        return nil;
    }

    //所有type都初始化好了，直接从map读，如果读不到就是编译器bug了
    var tn = get_larva_type_name(a);
    Type tp;
    !<<
    l_tp = lar_reflect_type_map[lar_str_to_go_str(l_tn)]
    !>>
    debug.assert(tp !== nil, "bug");
    return tp;
}
