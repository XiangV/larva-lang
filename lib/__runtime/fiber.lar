!<<

import (
    "context"
    "time"
)

func lar_go_func_new_fiber_ctx_with_cancel(lar_fiber *lar_go_stru_fiber, name string) (new_lar_fiber *lar_go_stru_fiber,
                                                                                       cancel context.CancelFunc) {
    var (
        par_ctx context.Context
        ctx     context.Context
    )
    if lar_fiber == nil {
        par_ctx = context.Background()
    } else {
        par_ctx = lar_fiber.ctx()
    }
    ctx, cancel = context.WithCancel(par_ctx)

    new_lar_fiber = &lar_go_stru_fiber{
        _name: name,
        _ctx:  ctx,
    }

    return
}

func lar_go_func_new_fiber_ctx_with_timeout(lar_fiber *lar_go_stru_fiber, name string, timeout time.Duration) (new_lar_fiber *lar_go_stru_fiber,
                                                                                                               cancel context.CancelFunc) {
    var ctx context.Context
    ctx, cancel = context.WithTimeout(lar_fiber.ctx(), timeout)

    new_lar_fiber = &lar_go_stru_fiber{
        _name: name,
        _ctx:  ctx,
    }

    return
}
!>>
