!<<

import (
    "fmt"
)

!>>

/*
GoAny和Any一样，都对应的go层面的interface{}，用不同名字只是为了在逻辑上区分不同场景的不同用法
显式用GoAny的代码表示对应类型可能为非larva类型
用Any的地方表示这里逻辑上只允许用larva类型
*/
public interface GoAny
{
}

public interface Any
{
}

public void print(GoAny a)
{
    !<<
    fmt.Print(lar_go_func_any_to_go_str(l_a))
    !>>
}

public void println(GoAny a)
{
    !<<
    fmt.Println(lar_go_func_any_to_go_str(l_a))
    !>>
}

public T zero_value<T>()
{
    T t;
    return t;
}

public T assert_type<T>(GoAny a)
{
    !<<
    return l_a.(@<<{T}>>)
    !>>
}

public bool try_assert_type<T>(GoAny a, ref T t)
{
    bool ok;
    !<<
    *l_t, l_ok = l_a.(@<<{T}>>)
    !>>
    return ok;
}
