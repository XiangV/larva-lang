/*
GoAny和Any一样，都对应的go层面的interface{}，用不同名字只是为了在逻辑上区分不同场景的不同用法
显式用GoAny的代码表示对应类型可能为非larva类型
用Any的地方表示这里逻辑上只允许用larva类型
*/
public interface GoAny
{
}

public interface Any
{
}

public T zero_value<T>()
{
    T t;
    return t;
}

public T assert_type<T>(GoAny a)
{
    !<<
    return l_a.(@<<{T}>>)
    !>>
}

public bool try_assert_type<T>(GoAny a, ref T t)
{
    bool ok;
    !<<
    *l_t, l_ok = l_a.(@<<{T}>>)
    !>>
    return ok;
}

//因为经常会有将闭包回调作为参数传入的情况，弄个通用的接口在这里
public interface Callable
{
    public void call();
}
