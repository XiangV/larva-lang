/*
GoAny和Any一样，都对应的go层面的interface{}，用不同名字是为了区分不同场景的不同用法
显式用GoAny的代码表示对应类型可能为非larva类型，用Any的地方表示这里在正常逻辑下只允许或只会使用larva类型
GoAny的特殊性在于larva禁止其他类型和它的转换，即便GoAny和Any一模一样也不行，这是为了防止正常代码中不小心将go层面的对象代入larva层
如果有这类特殊需求，需要用native代码
*/
public interface GoAny
{
}

public interface Any
{
}

//常用的一些泛型函数

public T zero_value<T>()
{
    T t;
    return t;
}

public bool is_same<T>(T a, T b)
{
#if typeisprimitive(T)
    return a == b;
#else
    return a === b;
#endif
}

public bool eq<T>(T a, T b)
{
#if typeimplements(T, Equalable<T>)
    return a.eq(b);
#elif typeimplements(T, Comparable<T>)
    return a.cmp(b) == 0;
#else
    return is_same(a, b);
#endif
}

public int cmp<T>(T a, T b)
{
#if typeimplements(T, Comparable<T>)
    return a.cmp(b);
#elif typein(T, {bool})
    //bool类型按false比true小计算
    if (a == b)
    {
        return 0;
    }
    if (a)
    {
        return 1;
    }
    return -1;
#elif typeisprimitive(T)
    if (a < b)
    {
        return -1;
    }
    if (a > b)
    {
        return 1;
    }
    return 0;
#else
    #error "类型不可做比较操作"
#endif
}

public void swap<T>(ref T a, ref T b)
{
    T tmp = a;
    a = b;
    b = tmp;
}

public T min<T>(T a, T b)
{
    if (cmp(a, b) < 0)
    {
        return a;
    }
    return b;
}

public T max<T>(T a, T b)
{
    if (cmp(a, b) > 0)
    {
        return a;
    }
    return b;
}

/*
返回T的类型名
和"%T"格式化以及reflect.Type类的name方法返回的名字不同的是，后两者取的是实际值的类型名，不会返回接口类型名
而type_name这个函数可返回T本身的名字，即便T是一个接口
*/
public String type_name<T>()
{
    //方法：获取T的数组的类型名并去掉数组后缀
    T[] a;
    var s = "%T".(a);
    if (!s.has_suffix("[]"))
    {
        throw("BUG：数组类型名‘%T’不以‘[]’结尾".(a));
    }
    return s.sub_str(0, s.len() - 2);
}

public bool is_interface<T>()
{
    return zero_value<T>() === (Any)nil;
}

public bool try_assert_type<T>(Any a, ref T t)
{
    bool ok;
    !<<
    *l_t, l_ok = l_a.(@<<{T}>>)
    !>>
    return ok;
}

public T assert_type<T>(Any a)
{
    T t;
    if (!try_assert_type(a, ref t))
    {
        throw(new TypeAssertionError());
    }
    return t;
}

//常用的一些接口

public interface Callable
{
    public void call();
}

public interface Equalable<T>
{
    public bool eq(T t);
}

public interface Comparable<T>
{
    public int cmp(T t);
}
