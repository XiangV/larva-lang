/*
GoAny和Any一样，都对应的go层面的interface{}，用不同名字只是为了在逻辑上区分不同场景的不同用法
显式用GoAny的代码表示对应类型可能为非larva类型
用Any的地方表示这里逻辑上只允许用larva类型
*/
public interface GoAny
{
}

public interface Any
{
}

public T zero_value<T>()
{
    T t;
    return t;
}

/*
返回T的类型名
和"%T"格式化以及reflect.Type类的name方法返回的名字不同的是，后两者取的是实际值的类型名，不会返回接口类型名
而type_name这个函数可返回T本身的名字，即便T是一个接口
*/
public String type_name<T>()
{
    //方法：获取T的数组的类型名并去掉数组后缀
    T[] a;
    var s = "%T".(a);
    if (!s.has_suffix("[]"))
    {
        throw("BUG：数组类型名‘%T’不以‘[]’结尾".(a));
    }
    return s.sub_str(0, s.len() - 2);
}

public bool try_assert_type<T>(GoAny a, ref T t)
{
    bool ok;
    !<<
    *l_t, l_ok = l_a.(@<<{T}>>)
    !>>
    return ok;
}

public T assert_type<T>(GoAny a)
{
    T t;
    if (!try_assert_type(a, ref t))
    {
        throw(new TypeAssertionError());
    }
    return t;
}

//常用的一些接口

public interface Callable
{
    public void call();
}
