//String类的定义

!<<

import (
    "strings"
    "strconv"
    "fmt"
)

!>>

public class String
{
    public String(char[] arr)
    {
        !<<
        this.s = string(l_arr.arr)
        !>>
        this.h = 0;
    }

    public String str()
    {
        return this;
    }

    public long len()
    {
        !<<
        return int64(len(this.s))
        !>>
    }

    public char char_at(long idx)
    {
        !<<
        return this.s[l_idx]
        !>>
    }

    public char[] to_char_array()
    {
        !<<
        return &lar_arr_uint8_1{arr: []uint8(this.s)}
        !>>
    }

    public String repr()
    {
        !<<
        return &lar_cls_@<<String>>{
            s: fmt.Sprintf("%q", this.s),
        }
        !>>
    }

    public int cmp(String other)
    {
        !<<
        if this.s < l_other.s {
            return int32(-1)
        }
        if this.s > l_other.s {
            return int32(1)
        }
        return int32(0)
        !>>
    }

    public bool eq(String other)
    {
        !<<
        return this.s == l_other.s;
        !>>
    }

    public long hash()
    {
        if (this.h == 0)
        {
            ulong h;
            !<<
            s := this.s
            sl := len(s)
            for i := 0; i < sl; i ++ {
                l_h = (l_h + uint64(s[i])) * 1000003
            }
            !>>
            if (h == 0)
            {
                h = 1;
            }
            this.h = (long)h;
        }
        return this.h;
    }

    public long index(String s)
    {
        !<<
        return int64(strings.Index(this.s, l_s.s))
        !>>
    }

    public long index_char(char c)
    {
        !<<
        return int64(strings.IndexByte(this.s, l_c))
        !>>
    }

    public String concat(String s)
    {
        !<<
        return &lar_cls_@<<String>>{
            s: this.s + l_s.s,
        }
        !>>
    }

    public bool has_prefix(String s)
    {
        !<<
        return strings.HasPrefix(this.s, l_s.s);
        !>>
    }

    public bool has_suffix(String s)
    {
        !<<
        return strings.HasSuffix(this.s, l_s.s);
        !>>
    }

    public String join(Iter<String> si)
    {
        !<<
        sl := make([]string, 0, 16)
        for ; !l_si.lar_method_after_end(lar_fiber); l_si.lar_method_inc(lar_fiber) {
            sl = append(sl, lar_str_to_go_str(l_si.lar_method_get(lar_fiber)))
        }
        return lar_str_from_go_str(strings.Join(sl, this.s))
        !>>
    }

    public String[] split_n(String sep, long n)
    {
        if (n <= 0)
        {
            throw(new ValueError("参数n不是正整数，n=%d".(n)));
        }

        !<<
        var sl []string
        !>>

        if (sep === nil)
        {
            !<<
            var (
                count int64  = 0
                idx   int    = 0
                s     string = this.s
                s_len int    = len(s)
            )
            sl = make([]string, 0, 8) //经验值
            for {
                //跳过空白字符
                for idx < s_len && lar_go_func_char_is_space(s[idx]) {
                    idx ++
                }

                if idx == s_len {
                    //结束
                    break
                }

                if count + 1 == l_n {
                    //即将达到最大限制，将剩余字符串全部作为最后一个部分
                    sl = append(sl, s[idx :])
                    count ++
                    break
                }

                //增加新的分割部分
                end_idx := idx + 1
                for end_idx < s_len && !lar_go_func_char_is_space(s[end_idx]) {
                    end_idx ++
                }
                sl = append(sl, s[idx : end_idx])
                count ++
                idx = end_idx
            }
            !>>
        }
        else if (sep.len() == 0)
        {
            throw(new ValueError("分隔符为空串"));
        }
        else
        {
            !<<
            sl = strings.SplitN(this.s, l_sep.s, int(l_n))
            !>>
        }

        long new_n;
        !<<
        l_new_n = int64(len(sl))
        !>>
        var a = new String[new_n];
        for (long i = 0; i < new_n; ++ i)
        {
            String s;
            !<<
            l_s = lar_str_from_go_str(sl[l_i])
            !>>
            a[i] = s;
        }
        return a;
    }

    public String[] split(String sep)
    {
        return this.split_n(sep, this.len() + 1);
    }

    public String sub_str(long begin, long end)
    {
        throw_on_range_error(this.len(), begin, end);
        !<<
        return lar_str_from_go_str(this.s[l_begin : l_end])
        !>>
    }

    public String repeat(long count)
    {
        long s_len = this.len();
        if (count < 0 || (count > 0 && s_len * count / count != s_len))
        {
            throw(new ValueError("String.repeat参数错误，count=%d，字符串长度=%d".(count, s_len)));
        }
        !<<
        return lar_str_from_go_str(strings.Repeat(this.s, int(l_count)));
        !>>
    }

    public bool parse_bool()
    {
        bool r, ok;
        !<<
        var err error
        l_r, err = strconv.ParseBool(this.s)
        l_ok = err == nil
        !>>
        if (!ok)
        {
            throw(new ValueError("无效的bool字面量：%r".(this)));
        }
        return r;
    }

    public long parse_long(int base)
    {
        return _parse_number<long>(this, base);
    }

    public ulong parse_ulong(int base)
    {
        return _parse_number<ulong>(this, base);
    }

    public double parse_double()
    {
        return _parse_number<double>(this, 0);
    }

    !<<
    s string;
    !>>
    long h; //缓存的hash值，为0表示还没有计算
}

T _parse_number<T>(String s, int base)
{
    if (base < 0 || base == 1 || base > 36)
    {
        throw(new ValueError("不支持%d进制".(base)));
    }

    String org_s = s;
    int org_base = base;

    var fix_s_and_base = [-]{
        if (s.len() >= 3 && base == 0)
        {
            //由于go的新版本的整数parse去掉了0b、0o等语法，自己加上

            //提取符号
            String sign_str = nil;
            char sign = s.char_at(0);
            if (sign == '+' || sign == '-')
            {
                sign_str = s.sub_str(0, 1);
                s = s.sub_str(1, s.len());
            }

            //若符合语法则修改s和base
            if (s.char_at(0) == '0')
            {
                char c = s.char_at(1);
                if (c == 'B' || c == 'b')
                {
                    s = s.sub_str(2, s.len());
                    base = 2;
                }
                if (c == 'O' || c == 'o')
                {
                    s = s.sub_str(2, s.len());
                    base = 8;
                }
            }

            //补上sign
            if (sign_str !== nil)
            {
                s = sign_str.concat(s);
            }
        }
    };

    T r;
    bool ok;

    !<<
    var err error
    !>>

#use
    long tmp = r;
    fix_s_and_base.call();
    !<<
    l_r, err = strconv.ParseInt(l_s.s, int(l_base), 64)
    !>>
#oruse
    ulong tmp = r;
    fix_s_and_base.call();
    !<<
    l_r, err = strconv.ParseUint(l_s.s, int(l_base), 64)
    !>>
#oruse
    double tmp = r;
    !<<
    l_r, err = strconv.ParseFloat(l_s.s, 64)
    !>>
#oruse
    #error 只支持long、ulong、double
#enduse

    !<<
    l_ok = err == nil
    !>>

    if (!ok)
    {
        throw(new ValueError("无效的%s%T字面量：%r".("" if org_base == 0 else "%d进制".(org_base), r, org_s)));
    }

    return r;
}
