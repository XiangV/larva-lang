/*
Channel通讯类，用于fiber之间的通讯，实际就是go的chan的包装
若Chan关闭，recv会返回T的zero_value并通过ref参数指示是否被关闭，send则会crash
*/

public class Chan<T>
{
    public Chan(long buf_size)
    {
        if (buf_size < 0)
        {
            throw(new ValueError("无效的缓冲大小：%d".(buf_size)));
        }
        !<<
        this.ch = make(chan @<<{T}>>, l_buf_size)
        !>>
    }

    public long size()
    {
        !<<
        return int64(len(this.ch))
        !>>
    }

    public long buf_size()
    {
        !<<
        return int64(cap(this.ch))
        !>>
    }

    void throw_if_canceled()
    {
        !<<
        select {
        case <-lar_fiber.ctx.Done():
            lar_fiber.throw_when_canceled()
        default:
        }
        !>>
    }

    public void send(T data)
    {
        this.throw_if_canceled();

        !<<
        select {
        case this.ch <- l_data:
            return
        case <-lar_fiber.ctx.Done():
            lar_fiber.throw_when_canceled()
        }
        !>>
    }

    public bool try_send(T data)
    {
        this.throw_if_canceled();

        !<<
        select {
        case this.ch <- l_data:
            return true
        case <-lar_fiber.ctx.Done():
            lar_fiber.throw_when_canceled()
        default:
            return false
        }
        !>>
    }

    public void close()
    {
        !<<
        close(this.ch)
        !>>
    }

    public T recv(ref bool closed)
    {
        this.throw_if_canceled();

        T t;
        bool ok;
        !<<
        select {
        case l_t, l_ok = <-this.ch:
        !>>
            closed = !ok;
            return t;
        !<<
        case <-lar_fiber.ctx.Done():
            lar_fiber.throw_when_canceled()
        }
        !>>
    }

    public T try_recv(ref bool ok, ref bool closed)
    {
        this.throw_if_canceled();

        T t;
        !<<
        select {
        case l_t, *l_ok = <-this.ch:
        !>>
            closed = !ok;
        !<<
        case <-lar_fiber.ctx.Done():
            lar_fiber.throw_when_canceled()
        default:
        !>>
            ok = false;
            closed = false;
        !<<
        }
        !>>
        return t;
    }

    !<<
    ch chan @<<{T}>>
    !>>
}
