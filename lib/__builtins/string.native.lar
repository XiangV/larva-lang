import __internal;

!<<

import (
    "fmt"
    "reflect"
)

func lar_str_from_go_str(s string) *lar_cls_@<<String>> {
    return &lar_cls_@<<String>>{
        s: s,
    }
}

func lar_str_to_go_str(ls *lar_cls_@<<String>>) string {
    return ls.s
}

func lar_str_fmt(format string, a ...interface{}) *lar_cls_@<<String>> {
    return lar_str_from_go_str(fmt.Sprintf(format, a...))
}

func lar_go_func_any_to_go_str(lar_fiber *lar_go_stru_fiber, a interface{}) string {
    strable, ok := a.(lar_intf_@<<Stringable>>)
    if ok {
        return lar_str_to_go_str(strable.lar_method_str(lar_fiber))
    }
    return lar_go_func_any_repr_to_go_str(lar_fiber, a)
}

func lar_go_func_any_repr_to_go_str(lar_fiber *lar_go_stru_fiber, a interface{}) string {
    switch v := a.(type) {
    case nil:
        return "<nil>"
    case bool:
        return fmt.Sprintf("%t", v)
    case int8, uint8, int16, uint16, int32, uint32, int64, uint64:
        return fmt.Sprintf("%d", v)
    case float32, float64:
        return fmt.Sprintf("%g", v)
    }

    //检查是否larva对象
    lri, ok := a.(lar_reflect_intf)
    if !ok {
        return fmt.Sprintf("<GoType %s object>", reflect.TypeOf(a).String())
    }

    p := reflect.ValueOf(&lri).Elem().InterfaceData()[1]
    if p == 0 {
        //某类的nil指针
        nil_reprable, ok := lri.(lar_intf_@<<NilRepresentable>>)
        if ok {
            //定义了nil_repr，使用
            return lar_str_to_go_str(nil_reprable.lar_method_nil_repr(lar_fiber))
        }
    } else {
        //正常对象
        reprable, ok := lri.(lar_intf_@<<Representable>>)
        if ok {
            //定义了repr，使用
            return lar_str_to_go_str(reprable.lar_method_repr(lar_fiber))
        }
    }

    //nil_repr和repr都没定义，输出对象信息即可
    return fmt.Sprintf("<%s object at 0x%X>", lar_str_to_go_str(lri.lar_reflect_type_name()), p)
}

func lar_go_func_any_type_name_to_go_str(lar_fiber *lar_go_stru_fiber, a interface{}) string {
    return lar_str_to_go_str(lar_func_@<<__internal.reflect_type_name>>(lar_fiber, a))
}

//判断一个8-bit char是否为空白符
func lar_go_func_char_is_space(c uint8) bool {
    //六个空白符：\t \n \v \f \r \x20
    return c >= 9 && c <= 13 || c == 32
}

!>>
