!<<

import (
    "reflect"
)

!>>

//可以用throw函数抛出的对象类型
public interface Throwable
{
    Stringable usemethod;
}

//抛出异常
public void throw(Throwable t)
{
    !<<
    panic(lar_exc_create_catched_throwable(lar_fiber, l_t, 2))
    !>>
}

//捕获语法返回的对象：抛出的对象+traceback的组合
//定义：Catched<Throwable>是所有Catched对象的base
public class Catched<T>
{
    Catched(T t, String tb)
    {
        this.t = t;
        this.tb = tb;
    }

    public void rethrow()
    {
        Throwable t;
        if (!try_assert_type(this.t, ref t))
        {
            abort("BUG:类型‘%T’的throwed值没有实现Throwable接口".(this));
        }
        var c = new Catched<Throwable>(t, this.tb);
        !<<
        panic(l_c)
        !>>
    }

    public T throwed()
    {
        return this.t;
    }

    public String traceback()
    {
        return this.tb;
    }

    T t;
    String tb;
}

//--------------------------------------------------------------------

//将recover捕获的go的异常转为larva的Catched对象
Catched<Throwable> _go_recovered_to_catched(GoAny _r)
{
    Any r;
    !<<
    l_r = l__r
    !>>
    if (r === nil) {
        return nil;
    }
    Catched<Throwable> c;
    if (try_assert_type(r, ref c))
    {
        return c;
    }
    !<<
    //不是larva自己的异常，重新panic
    panic(l_r)
    !>>
}

//异常处理接口，用于handle_exc
public interface ExcHandler<T>
{
    public void handle(Catched<T> catched_exc);
}

//捕获指定类型的异常并处理，和defer搭配使用
public void handle_exc<T>(ExcHandler<T> handler)
{
    GoAny r;
    !<<
    l_r = recover()
    !>>
    var c = _go_recovered_to_catched(r);
    if (c === nil)
    {
        //无异常
        return;
    }
    T throwed;
    if (!try_assert_type(c.throwed(), ref throwed))
    {
        //不是当前需要的类型，继续往上抛
        c.rethrow();
    }
    //指定handler的时候才处理异常
    if (handler !== nil)
    {
        handler.handle(new Catched<T>(throwed, c.traceback()));
    }
}

//忽略所有异常，用于defer中，相当于handle_exc<Throwable>(nil)
public void ignore_exc()
{
    GoAny r;
    !<<
    l_r = recover()
    !>>
    _go_recovered_to_catched(r);
}

//---------------------------------------------------------------------

//另一种捕获异常的编码形式，传入一个Callable接口的对象（一般是闭包），会调用它并将捕获的异常返回

void _call_and_catch<T>(Callable callee, ref Catched<T> c)
{
    defer handle_exc<T>([]{
        public void handle(Catched<T> catched_exc)
        {
            c = catched_exc;
        }
    });
    callee.call();
}

public Catched<T> call_and_catch<T>(Callable callee)
{
    Catched<T> c;
    _call_and_catch(callee, ref c);
    return c;
}

//---------------------------------------------------------------------

//空异常，用于一些简单的不含信息的异常的base，异常区分只需要通过名字来识别
public class EmptyException
{
    public String str()
    {
        return "";
    }
}

//这里是通用的一些内建异常类型

//运行时类型转换（从接口到类型或其他接口）失败的错误
public class TypeAssertionError
{
    String s usemethod(str);
}

//索引（下标）错误，用于数组、Slice、Vector等可用下标定位元素的相关代码中
public class IndexError
{
    public IndexError(long i)
    {
        this.idx = i;
    }

    public String str()
    {
        return "%d".(this.idx);
    }

    long idx;
}

//通用的索引越界检查，用于下标类操作，检查不通过则抛出IndexError
public void throw_on_index_error(long l, long i)
{
    if (l < 0 || i < 0 || i >= l)
    {
        throw(new IndexError(i));
    }
}

//下标范围错误，用于slice、sub_str之类的取范围相关代码
public class RangeError
{
    public RangeError(long l, long b, long e)
    {
        this.len = l;
        this.begin = b;
        this.end = e;
    }

    public String str()
    {
        return "[%d][%d:%d]".(this.len, this.begin, this.end);
    }

    long len;
    long begin;
    long end;
}

//通用的下标范围检查，用于切片类操作，检查不通过则抛出RangeError
public void throw_on_range_error(long l, long b, long e)
{
    if (l < 0 || b < 0 || b > l || e < b || e > l)
    {
        throw(new RangeError(l, b, e));
    }
}

//键错误，用于各种映射、集合等用到Key的地方，k为错误的键的字符串描述
public class KeyError
{
    public KeyError(String k)
    {
        this.k = k;
    }

    String k usemethod(str);
}

//值错误，用于根据值解析、查找等操作的地方，v为错误的值的字符串描述
public class ValueError
{
    public ValueError(String v)
    {
        this.v = v;
    }

    String v usemethod(str);
}

//go的error类型的一个port，用于一些native代码从error到异常的转换
public class GoError
{
    public String str()
    {
        !<<
        return lar_str_from_go_str("[GoError]" + this.err.Error())
        !>>
    }

    public GoError go_err()
    {
        return this;
    }

    !<<
    err error
    !>>
}

public interface GoErrorPorter
{
    public GoError go_err();
}

/*
通过一个简单约定来简化各种GoErrorPorter的抛出实现
规则：
- E是一个异常类型并实现了GoErrorPorter接口
- E必须有一个字段是GoError类型，且名字为“ge”（不要求是public的，这里用Native代码直接赋值）
- go_err必须能断言为Go的error类型，并将用其构造GoError对象并赋值给“ge”字段

虽然说满足了这三条就可以正常编译执行，但实际上都是直接用代码：
    GoError ge usemethod;
*/
public void throw_go_error_porter<E>(GoAny go_err)
{
#if typeimplements(E, GoErrorPorter)
    E e;
    !<<
    l_e = reflect.New(reflect.TypeOf(l_e).Elem()).Interface().(@<<{E}>>)
    l_e.m_ge = &lar_cls_@<<GoError>>{
        err:    l_go_err.(error),
    }
    !>>
    throw(e);
#else
    #error "E必须实现GoErrorPorter"
#endif
}
